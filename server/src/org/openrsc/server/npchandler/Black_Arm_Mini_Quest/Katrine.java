/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/
package org.openrsc.server.npchandler.Black_Arm_Mini_Quest;

import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.InvItem;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.model.World;
import org.openrsc.server.npchandler.NpcHandler;



public class Katrine implements NpcHandler 
{



	public void handleNpc(final Npc npc, final Player owner) throws Exception 
	{
	
		npc.blockedBy(owner);
		owner.setBusy(true);
		
		
		Quest phoenix = owner.getQuest(52);
		Quest blackarm = owner.getQuest(51);
		Quest heroesQuest = owner.getQuest(20);
		
		if (heroesQuest == null) 
		{
			if(phoenix != null) 
			{
				if(phoenix.finished()) 
				{
					phoenix(npc, owner);
				} 
				else 
				{
					if(blackarm != null) 
					{
						if(blackarm.finished()) 
						{
							blackarm(npc, owner);
						} 
						else 
						{
							switch(blackarm.getStage()) 
							{
								case 0:
									talkedWithTramp(npc, owner);
								break;
								case 1:
									if(owner.getInventory().countId(59) < 2) 
									{
										noBows(npc, owner);
									} 
									else 
									{
										hasBows(npc, owner);
									}
								break;
							}
						}
					}
				}
			} 
			else 
			{
				if(blackarm != null) 
				{
					if(blackarm.finished()) 
					{
						blackarm(npc, owner);
					} 
					else 
					{
						switch(blackarm.getStage()) 
						{
							case 0:
								talkedWithTramp(npc, owner);
							break;
							case 1:
								if(owner.getInventory().countId(59) < 2) 
								{
									noBows(npc, owner);
								} 
								else 
								{
									hasBows(npc, owner);
								}
							break;
						}
					}
				} 
				else 
				{
					notTalkedToTramp(npc, owner);
				}
			}
		}	
		else if (heroesQuest != null)
		{
			if (heroesQuest.finished()) 
			{
				if (phoenix != null && phoenix.finished()) 
				{
					phoenix(npc, owner);
				}
				else
				{
					World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"good work on getting that candlestick", "scarface pete will think twice", "before messing with us again"}, true) 
					{
						public void finished() 
						{
							owner.setBusy(false);
							npc.unblock();
						}
					});
				}
			}
			else
			{	
				if (phoenix != null && phoenix.finished()) 
				{
					phoenix(npc, owner);
				}
				else
				{
					switch(heroesQuest.getStage())
					{
						case 1:
							thievesArmBand1(npc, owner);
						break;
						case 2:
						case 3:
							noCandle(npc, owner);
						break;
						case 4:
							if (owner.getInventory().countId(585) >= 1)
							{
								hasCandle(npc, owner);
							}
							else
							{
								noCandle(npc, owner);
							}
						break;
						case 5:
							thievesArmBand3(npc, owner);
						break;
					}
				}
			}
		}	
	}

	
	
	
	private void thievesArmBand1(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hello fellow blackarm member", "what can I do for you?"}, true) 
		{
			public void finished()
			{
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) 
				{
					public void action() 
					{
						final String[] options107 = {"Where can I find a master thief armband?", "Nothing thanks"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107)
						{
							public void handleReply(final int option, final String reply)
							{
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) 
								{
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) 
								{
									case 0:
										armBand(npc, owner);
									break;
									case 1:
										goodBye(npc, owner);
									break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	
	private void armBand(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"A master thief armband you say? ", "that is what we reward thieves with", "When they have stolen something very valuable"}) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"So your saying that I need to steal something valuable?"}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Exactly", "Steal scarface pete's candlestick", "and bring it back to me", "His mansion is located in brimhaven", "To access his mansion you will need", "a full set of black armor and ID paper", "our field agent trobert has the id paper", "he has already set up at brimhaven", "meet him there", "remember the gang password is..", "four leaf clover"}) 
						{
							public void finished() 
							{
								World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) 
								{
									public void action() 
									{
										final String[] options107 = {"I accept your challenge", "This sounds too dangerous for me"};
										owner.setBusy(false);
										owner.sendMenu(options107);
										owner.setMenuHandler(new MenuHandler(options107) 
										{
											public void handleReply(final int option, final String reply) 
											{
											owner.setBusy(true);
												for(Player informee : owner.getViewArea().getPlayersInView()) 
												{
												informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
												}
												switch(option) 
												{
													case 0:
														acceptedCandleJob(npc, owner);
													break;
													case 1:
														goodBye(npc, owner);
													break;
												}
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void noCandle(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hey, have you got that candlestick yet?"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"No not yet"}) 
				{
					public void finished()
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ok well come back to me when you have"}) 
						{
							public void finished() 
							{
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
	private void hasCandle(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hey, have you got that candlestick yet?"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Yes I have it right here"}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Good stuff, heres your master thief armband"}) 
						{
							public void finished() 
							{
								owner.getInventory().remove(585, 1);
								owner.getInventory().add(586, 1);
								owner.sendInventory();	
								owner.incQuestCompletionStage(20);
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
	private void acceptedCandleJob(final Npc npc, final Player owner)
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Good luck"})
		{
			public void finished() 
			{
				owner.incQuestCompletionStage(20);
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void thievesArmBand3(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"good work on getting that candlestick", "scarface pete will think twice", "before messing with us again"}, true) 
		{
			public void finished() 
			{
				if (owner.getBank().countId(586) >= 1 || owner.getInventory().countId(586) >= 1)
				{
					World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I seem to have lost my armband", "Could I have another?"})
					{
						public void finished() 
						{
							World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Sure here you go"})
							{
								public void finished() 
								{
									owner.sendMessage("Katrine gives you another armband");
									owner.getInventory().add(586, 1);
									owner.sendInventory();
									owner.setBusy(false);
									npc.unblock();
								}
							});
						}
					});
				}
				else
				{
					owner.setBusy(false);
					npc.unblock();
				}
			}
		});
	}
	
	private void goodBye(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Very well.."}) 
		{
			public void finished() 
			{
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private final void notTalkedToTramp(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"What is this place?"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"It's a private business. Can I help you at all?"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
							public void action() {
								final String[] options1 = {"What sort of business?", "I'm looking for fame and riches."};
								owner.setBusy(false);
								owner.sendMenu(options1);
								owner.setMenuHandler(new MenuHandler(options1) {
									public void handleReply(final int option, final String reply) {
										owner.setBusy(true);
										for(Player informee : owner.getViewArea().getPlayersInView()) {
											informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
										}
										switch(option) {
											case 0:
												whatSort(npc, owner);
											break;
											case 1:
												fame(npc, owner);
											break;
										}
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void whatSort(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"A small, family business. We give financial advice to other companies."}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void fame(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"And you expect to find it in the back streets of Varrock?"}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private final void noBows(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Have you got those crossbows for me yet?"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"No, I haven't found them yet."}) {
					public void finished() {
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I need two crossbows stolen from the Phoenix Gang weapon stash,", "which if you head east for a bit,", "is a building on the south side of the road.", "Come back when you got 'em"}) {
							public void finished() {
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
	private final void hasBows(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Have you got those crossbows for me yet?"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Yes I have"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ok. You can join our gang now. Feel free to enter"}) {
							public void finished() {
								owner.getInventory().remove(new InvItem(59,1));
								owner.getInventory().remove(new InvItem(59,1));
								owner.sendInventory();
								owner.finishQuest(51);
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
	private void becomeThief(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Well, I'm sorry luv, I'm not giving away any of my secrets.", "Not to people who ain't Black Arm members anyway"}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void doorOut(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
			public void action() {
				owner.sendMessage("Katrine groans.");
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Try... the one you just came in?"}) {
					public void finished() {
						owner.setBusy(false);
						npc.unblock();
					}
				});
			}
		});
	}
	
	private void gang(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Who told you that?"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options7 = {"I'd rather not reveal my sources.", "It was the tramp outside.", "Everyone knows - it's no great secret."};
						owner.setBusy(false);
						owner.sendMenu(options7);
						owner.setMenuHandler(new MenuHandler(options7) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										noSource(npc, owner);
										break;
									case 1:
										itWasTramp(npc, owner);
										break;
									case 2:
										obvious(npc, owner);
								}
							}
						});
					}
				});
			}
		});
	}
	
	private final void obvious(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I thought we were safe back here!"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Oh no, not at all...It's so obvious!", "Even the town guard have caught on..."}) {
					public void finished() {
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Wow! We MUST be obvious!", "I guess they'll be expecting bribes again soon in that case.", "Thanks for the information.", "Is there anything else you want to tell me?"}) {
							public void finished() {
								whatYouWant(npc, owner);
							}
						});
					}
				});
			}
		});
	}
	
	private final void itWasTramp(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Is that guy still out there? He's getting to be a nuisance...", "Remind me to send someone to kill him.", "So now you've found us, what do you want?"}) {
			public void finished() {
				whatYouWant(npc, owner);
			}
		});
	}
	
	private final void noSource(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yes, I can understand that. So what do you want with us?"}) {
			public void finished() {
				whatYouWant(npc, owner);
			}
		});
	}
	
	private final void whatYouWant(final Npc npc, final Player owner) {
		final String[] options8 = {"I want to become a member of your gang.", "I want some hints for becoming a thief.", "I'm looking for the door out of here."};
		owner.setBusy(false);
		owner.sendMenu(options8);
		owner.setMenuHandler(new MenuHandler(options8) {
			public void handleReply(final int option, final String reply) {
				owner.setBusy(true);
				for(Player informee : owner.getViewArea().getPlayersInView()) {
					informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
				}
				switch(option) {
					case 0:
						joinGang(npc, owner);
						break;
					case 1:
						becomeThief(npc, owner);
						break;
					case 2:
						doorOut(npc, owner);
						break;
				}
			}
		});
	}
	
	private void joinGang(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"How unusual.", "Normally we recruit for our gang by watching local thugs and thieves in action.", "People don't normally waltz in here saying 'hello, can I play'.", "How can I be sure you can be trusted?"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options0 = {"Well, you can give me a try can't you?", "Well, people tell me I have an honest face."};
						owner.setBusy(false);
						owner.sendMenu(options0);
						owner.setMenuHandler(new MenuHandler(options0) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										pushTask(npc, owner);
										break;
									case 1:
										honestFace(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void honestFace(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"... How unusual.", "Someone honest wanting to join a gang of thieves.", "Excuse me if I remain unconvinced.", "I may have a solution actually.", "Our rival gang - the Phoenix Gang - has a weapons stash a little east of here.", "We're fresh out of crossbows", "So if you could steal a couple of crossbows for us", "it would be very much appreciated", "Then I'll be happy to call you a Black Arm"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Sounds simple enough. Any particular reason you need two of them?"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I have an idea for framing a local merchant who is refusing to pay", "our very reasonable 'keep-your-life-pleasant' insurance rates.", "I need two phoenix crossbows", "One to kill somebody important with", "and the other to hide in the merchants house", "where the local law can find it!", "When they find it, they'll suspect him of murdering", "the target for the Phoenix gang and hopefully, arrest the whole gang!", "Leaving us as the only thieves gang in Varrock! Brilliant, eh?"}) {
							public void finished() {
								World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Yeah, brilliant. So who are you planning to murder?"}) {
									public void finished() {
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I haven't decided yet, but it'll need to be somebody important.", "Say, why you being so nosey?", "You aren't with the law are you?"}) {
											public void finished() {
												World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"No, no! Just curious."}) {
													public void finished() {
														World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You'd better just keep your mouth shut about this plan", "or I'll make sure it stays shut for you.", "Now are you going to go get those crossbows or not?"}) {
															public void finished() {
																World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
																	public void action() {
																		final String[] options1 = {"Ok, no problem.", "Sounds a little tricky. Got anything easier?"};
																		owner.setBusy(false);
																		owner.sendMenu(options1);
																		owner.setMenuHandler(new MenuHandler(options1) {
																			public void handleReply(final int option, final String reply) {
																				owner.setBusy(true);
																				for(Player informee : owner.getViewArea().getPlayersInView()) {
																					informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
																				}
																				switch(option) {
																					case 0:
																						noProblem(npc, owner);
																						break;
																					case 1:
																						tricky(npc, owner);
																						break;
																				}
																			}
																		});
																	}
																});
															}
														});
													}
												});
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void pushTask(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I'm not so sure.", "Thinking about it... I may have a solution actually.", "Our rival gang - the Phoenix Gang - has a weapons stash a little east of here.", "We're fresh out of crossbows", "So if you could steal a couple of crossbows for us", "it would be very much appreciated", "Then I'll be happy to call you a Black Arm"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Sounds simple enough. Any particular reason you need two of them?"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I have an idea for framing a local merchant who is refusing to pay", "our very reasonable 'keep-your-life-pleasant' insurance rates.", "I need two phoenix crossbows", "One to kill somebody important with", "and the other to hide in the merchants house", "where the local law can find it!", "When they find it, they'll suspect him of murdering", "the target for the Phoenix gang and hopefully, arrest the whole gang!", "Leaving us as the only thieves gang in Varrock! Brilliant, eh?"}) {
							public void finished() {
								World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Yeah, brilliant. So who are you planning to murder?"}) {
									public void finished() {
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I haven't decided yet, but it'll need to be somebody important.", "Say, why you being so nosey?", "You aren't with the law are you?"}) {
											public void finished() {
												World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"No, no! Just curious."}) {
													public void finished() {
														World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You'd better just keep your mouth shut about this plan", "or I'll make sure it stays shut for you.", "Now are you going to go get those crossbows or not?"}) {
															public void finished() {
																World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
																	public void action() {
																		final String[] options1 = {"Ok, no problem.", "Sounds a little tricky. Got anything easier?"};
																		owner.setBusy(false);
																		owner.sendMenu(options1);
																		owner.setMenuHandler(new MenuHandler(options1) {
																			public void handleReply(final int option, final String reply) {
																				owner.setBusy(true);
																				for(Player informee : owner.getViewArea().getPlayersInView()) {
																					informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
																				}
																				switch(option) {
																					case 0:
																						noProblem(npc, owner);
																						break;
																					case 1:
																						tricky(npc, owner);
																						break;
																				}
																			}
																		});
																	}
																});
															}
														});
													}
												});
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void tricky(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"If you're not up to a little bit of danger", "I don't think you've got anything to offer our gang."}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void noProblem(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Great!", "You'll find the Phoenix gang's weapon stash just next to a temple", "due east of here."}) {
			public void finished() {
				owner.incQuestCompletionStage(51);
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private final void talkedWithTramp(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"What is this place?"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"It's a private business. Can I help you at all?"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
							public void action() {
								final String[] options6 = {"I've heard you're the Black Arm Gang.", "What sort of business?", "I'm looking for fame and riches."};
								owner.setBusy(false);
								owner.sendMenu(options6);
								owner.setMenuHandler(new MenuHandler(options6) {
									public void handleReply(final int option, final String reply) {
										owner.setBusy(true);
										for(Player informee : owner.getViewArea().getPlayersInView()) {
											informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
										}
										switch(option) {
											case 0:
												gang(npc, owner);
												break;
											case 1:
												whatSort(npc, owner);
												break;
											case 2:
												fame(npc, owner);
												break;
										}
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private final void blackarm(final Npc npc, final Player owner) {
		final String[] messages42 = {"Hey"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages42, true) {
			public void finished() {
				final String[] messages43 = {"Hey"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages43) {
					public void finished() {
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
							public void action() {
								final String[] options7 = {"Who are all those people in there?", "Teach me to be a top class criminal"};
								owner.setBusy(false);
								owner.sendMenu(options7);
								owner.setMenuHandler(new MenuHandler(options7) {
									public void handleReply(final int option, final String reply) {
										owner.setBusy(true);
										for(Player informee : owner.getViewArea().getPlayersInView()) {
											informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
										}
										switch(option) {
											case 0:
												inThere(npc, owner);
												break;
											case 1:
												criminal(npc, owner);
												break;
										}
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void inThere(final Npc npc, final Player owner) {
		final String[] messages44 = {"They're just various rogues and thieves"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages44) {
			public void finished() {
				final String[] messages45 = {"They don't say a lot"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages45) {
					public void finished() {
						final String[] messages46 = {"Nope"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages46) {
							public void finished() {
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}

	private void criminal(final Npc npc, final Player owner) {
		final String[] messages47 = {"Teach yourself"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages47) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private final void phoenix(final Npc npc, final Player owner) {
		final String[] messages0 = {"You've got some guts coming here", "Phoenix guy", "Now go away"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages0, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						owner.sendMessage("Katrine spits");
						final String[] messages1 = {"Or I'll make sure you 'aven't got those guts anymore"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages1) {
							public void finished() {
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
}