/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/
package org.openrsc.server.npchandler.Dragon_Slayer;

import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.InvItem;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.model.World;
import org.openrsc.server.npchandler.NpcHandler;
public class Klarense implements NpcHandler {

	public void handleNpc(final Npc npc, final Player owner) {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(17);
		if(q != null) {
			if(q.finished()) {
				afterShipSold(npc, owner);
			} else {
				switch(q.getStage()) {
					case 0:
						questNotStarted(npc, owner);
						break;
					case 1:
						questStarted(npc, owner);
						break;
					default:
						afterShipSold(npc, owner);
						break;
				}
			}
		} else {
			questNotStarted(npc, owner);
		}
	}
	
	private void questNotStarted(final Npc npc, final Player owner) {
		final String[] messages0 = {"You're interested in a trip on the Lumbridge Lady are you?", "I admit she looks fine, but she isn't seaworthy right now"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages0, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options0 = {"Do you know when she will be seaworthy?", "Would you take me to Crandor Isle when it's ready?", "Ah well, nevermind"};
						owner.setBusy(false);
						owner.sendMenu(options0);
						owner.setMenuHandler(new MenuHandler(options0) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										seaworthy(npc, owner);
										break;
									case 1:
										crandor(npc, owner);
										break;
									case 2:
										owner.setBusy(false);
										npc.unblock();
										break;
								}
							}
						});
					}
				});
			}
		});
	}
		
	private void questStarted(final Npc npc, final Player owner) {
		final String[] messages0 = {"You're interested in a trip on the Lumbridge Lady are you?", "I admit she looks fine, but she isn't seaworthy right now"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages0, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options0 = {"Do you know when she will be seaworthy?", "Would you take me to Crandor Isle when it's ready?", "I don't suppose I could buy it", "Ah well, nevermind"};
						owner.setBusy(false);
						owner.sendMenu(options0);
						owner.setMenuHandler(new MenuHandler(options0) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										seaworthy(npc, owner);
										break;
									case 1:
										crandor(npc, owner);
										break;
									case 2:
										buyIt(npc, owner);
										break;
									case 3:
										owner.setBusy(false);
										npc.unblock();
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void seaworthy(final Npc npc, final Player owner) {
		final String[] messages1 = {"No not really", "Port Sarim's shipbuilders aren't very efficient", "So it could be quite a while"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages1) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void crandor(final Npc npc, final Player owner) {
		final String[] messages2 = {"Well even if I knew how to get there", "I wouldn't like to risk it", "Especially after goin to all the effort of fixing the old girl up"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages2) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void buyIt(final Npc npc, final Player owner) {
		final String[] messages3 = {"I guess you could", "I'm sure the work needed to do on it wouldn't be too expensive", "How does 2000 gold sound for a price?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages3) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options1 = {"Yep sounds good", "I'm not paying that much for a broken boat"};
						owner.setBusy(false);
						owner.sendMenu(options1);
						owner.setMenuHandler(new MenuHandler(options1) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										soundsGood(npc, owner);
										break;
									case 1:
										noPay(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void noPay(final Npc npc, final Player owner) {
		final String[] messages4 = {"That's Ok, I didn't particularly want to sell anyway"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages4) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void soundsGood(final Npc npc, final Player owner) {
		if(owner.getInventory().countId(10) > 1999) {
			owner.getInventory().remove(new InvItem(10, 2000));
			owner.sendInventory();
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ok she's all yours"}) {
				public void finished() {
					owner.incQuestCompletionStage(17); // 0x2
					owner.setBusy(false);
					npc.unblock();
				}
			});			
		} else {
			World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Except I don't have that much money on me"}) {
				public void finished() {
					owner.setBusy(false);
					npc.unblock();
				}
			});			
		}
	}
	
	private void afterShipSold(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
			public void action() {
				final String[] options0 = {"So would you like to sail this ship to Crandor Isle for me?", "So what needs fixing on this ship?", "What are you going to do now you don't have a ship?"};
				owner.setBusy(false);
				owner.sendMenu(options0);
				owner.setMenuHandler(new MenuHandler(options0) {
					public void handleReply(final int option, final String reply) {
						owner.setBusy(true);
						for(Player informee : owner.getViewArea().getPlayersInView()) {
							informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
						}
						switch(option) {
							case 0:
								sailForMe(npc, owner);
								break;
							case 1:
								fix(npc, owner);
								break;
							case 2:
								noShip(npc, owner);
						}
					}
				});
			}
		});
	}

	private void sailForMe(final Npc npc, final Player owner) {
		final String[] messages0 = {"no not me, I'm frightened of dragons"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages0, true) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void fix(final Npc npc, final Player owner) {
		final String[] messages1 = {"Well the big gaping hole in the hold is the main problem", "You'll need a few planks", "Hammered in with steel nails"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages1) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void noShip(final Npc npc, final Player owner) {
		final String[] messages2 = {"Oh I'll be fine", "I've got work as Port Sarim's first life guard"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages2) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
}