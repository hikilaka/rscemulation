package org.openrsc.server.npchandler.Dragon_Slayer;
/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/

import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.InvItem;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.model.Shop;
import org.openrsc.server.model.World;
import org.openrsc.server.npchandler.NpcHandler;

public class Oziach implements NpcHandler {
	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(17);
		if(q != null) {
			if(q.finished()) {
				questFinished(npc, owner);
			} else {
				switch(q.getStage()) {
					case 0:
						questStarted(npc, owner);
						break;
					default:
						questUnderway(npc, owner);
				}
				
			}
		} else {
			noQuestStarted(npc, owner);
		}
	}
	
	public void questFinished(final Npc npc, final Player owner) {
		final String[] messages6 = {"I have slain the dragon"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages6, true) {
			public void finished() {
				final String[] messages7 = {"Well done"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages7) {
					public void finished() {
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
							public void action() {
								final String[] options3 = {"Can I buy a rune plate mail body now please?", "Thank you"};
								owner.setBusy(false);
								owner.sendMenu(options3);
								owner.setMenuHandler(new MenuHandler(options3) {
									public void handleReply(final int option, final String reply) {
										owner.setBusy(true);
										for(Player informee : owner.getViewArea().getPlayersInView()) {
											informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
										}
										switch(option) {
											case 0:
												World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Sure"}) {
													public void finished() {
														Shop shop = World.getShop(187);
				      									owner.setAccessingShop(shop);
				      									owner.showShop(shop);
														owner.setBusy(false);
														npc.unblock();
													}
												});
												break;
											case 1:
												owner.setBusy(false);
												npc.unblock();
												break;
										}
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	public void questUnderway(final Npc npc, final Player owner) {
		npc.blockedBy(owner);
		owner.setBusy(true);
		final String[] messages21 = {"So how is thy quest going?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages21, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options18 = {"So where can I find this dragon?", "Where can I get an antidragon shield?"};
						owner.setBusy(false);
						owner.sendMenu(options18);
						owner.setMenuHandler(new MenuHandler(options18) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										whereDragon(npc, owner);
										break;
									case 1:
										shield(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	public void questStarted(final Npc npc, final Player owner) {
		final String[] messages56 = {"Aye tiz a fair day my friend"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages56, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options44 = {"Can you sell me some rune plate mail?", "I'm not your friend", "Yes it's a very nice day"};
						owner.setBusy(false);
						owner.sendMenu(options44);
						owner.setMenuHandler(new MenuHandler(options44) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										runeplate(npc, owner);
										break;
									case 1:
										friend(npc, owner);
										break;
									case 2:
										niceDay(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void runeplate(final Npc npc, final Player owner) {
		final String[] messages59 = {"Soo how does thee know I 'ave some?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages59) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options45 = {"The guildmaster of the champions' guild told me", "I am a master detective"};
						owner.setBusy(false);
						owner.sendMenu(options45);
						owner.setMenuHandler(new MenuHandler(options45) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										guildmaster(npc, owner);
										break;
									case 1:
										final String[] messages60 = {"Well however you found out about it", "This is armour fit for a hero to be sure", "So you'll need to prove to me that you're a hero before you can buy some"};
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages60) {
											public void finished() {
												World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
													public void action() {
														final String[] options46 = {"So how am I meant to prove that?", "That's a pity, I'm not a hero"};
														owner.setBusy(false);
														owner.sendMenu(options46);
														owner.setMenuHandler(new MenuHandler(options46) {
															public void handleReply(final int option, final String reply) {
																owner.setBusy(true);
																for(Player informee : owner.getViewArea().getPlayersInView()) {
																	informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
																}
																switch(option) {
																	case 0:
																		proveThat(npc, owner);
																		break;
																	case 1:
																		owner.setBusy(false);
																		npc.unblock();
																		break;
																}
															}
														});
													}
												});
											}
										});
								}
							}
						});
					}
				});
			}
		});
	}

	private void guildmaster(final Npc npc, final Player owner) {
		final String[] messages61 = {"Well if you're worthy of his advice", "You must have something going for you", "He has been known to let some weaklin's into his guild though", "I don't want just any old pumpkinmush to have this armour", "Jus cos they have a large amount of cash", "This is armour fit for a hero to be sure", "So you'll need to prove to me that you're a hero before you can buy some"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages61) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options47 = {"So how am I meant to prove that?", "That's a pity, I'm not a hero"};
						owner.setBusy(false);
						owner.sendMenu(options47);
						owner.setMenuHandler(new MenuHandler(options47) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										proveThat(npc, owner);
										break;
									case 1:
										owner.setBusy(false);
										npc.unblock();
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void proveThat(final Npc npc, final Player owner) {
		final String[] messages62 = {"Well if you want to prove yourself", "You could try and defeat Elvarg the dragon of the isle of crandor"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages62) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options48 = {"A dragon, that sounds like fun", "And will I need anything to defeat this dragon?", "I may be a champion, but I don't think I'm up to dragon killing yet"};
						owner.setBusy(false);
						owner.sendMenu(options48);
						owner.setMenuHandler(new MenuHandler(options48) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
									case 1:
										owner.incQuestCompletionStage(17);
										needAnything(npc, owner);
										break;
									case 2:
										owner.setBusy(false);
										npc.unblock();
								}
							}
						});
					}
				});
			}
		});
	}

	private void needAnything(final Npc npc, final Player owner) {
		final String[] messages63 = {"It's funny you should say that", "Elvarg really is one of the most powerful dragons", "I really wouldn't recommend charging in without special equipment", "Her breath is the main thing to watch out for", "You can get fried very fast", "Unless you have a special flameproof antidragon shield", "It won't totally protect you", "But it should prevent some of the damage to you"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages63) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options49 = {"So where can I find this dragon?", "Where can I get an antidragon shield?"};
						owner.setBusy(false);
						owner.sendMenu(options49);
						owner.setMenuHandler(new MenuHandler(options49) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										whereDragon(npc, owner);
										break;
									case 1:
										shield(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void shield(final Npc npc, final Player owner) {
		final String[] messages64 = {"I believe the duke of lumbridge castle may have one in his armoury"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages64) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options50 = {"So where can I find this dragon?", "Ok, I'll try and get everything together"};
						owner.setBusy(false);
						owner.sendMenu(options50);
						owner.setMenuHandler(new MenuHandler(options50) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										whereDragon(npc, owner);
										break;
									case 1:
										getEverything(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void whereDragon(final Npc npc, final Player owner) {
		final String[] messages65 = {"That is a problem too yes", "No one knows where the isle of crandor is located", "There was a map", "But it was torn up into three pieces", "Which are now scattered across Asgarnia", "You'll also struggle to find someone bold enough", "to take a ship to crandor island"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages65) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options51 = {"Where is the first piece of map?", "Where is the second piece of map?", "Where is the third piece of map?", "Where can I get an antidragon shield?"};
						owner.setBusy(false);
						owner.sendMenu(options51);
						owner.setMenuHandler(new MenuHandler(options51) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										firstPiece(npc, owner);
										break;
									case 1:
										secondPiece(npc, owner);
										break;
									case 2:
										thirdPiece(npc, owner);
										break;
									case 3:
										shield(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void getEverything(final Npc npc, final Player owner) {
		final String[] messages66 = {"Fare ye well"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages66) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void firstPieceKey(final Npc npc, final Player owner) {
		final String[] messages67 = {"Deep in a strange building known as Melzar's maze", "located north west of rimmington"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages67) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options52 = {"Where can I get an antidragon shield?", "Where is the second piece of map?", "Where is the third piece of map?", "Ok. I'll try and get everything together"};
						owner.setBusy(false);
						owner.sendMenu(options52);
						owner.setMenuHandler(new MenuHandler(options52) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										shield(npc, owner);
										break;
									case 1:
										secondPiece(npc, owner);
										break;
									case 2:
										thirdPiece(npc, owner);
										break;
									case 3:
										getEverything(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void firstPiece(final Npc npc, final Player owner) {
		if(owner.getInventory().countId(421) == 0) {
			firstPieceNoKey(npc, owner);
		} else {
		firstPieceKey(npc, owner);
		}
	}
	
	private void firstPieceNoKey(final Npc npc, final Player owner) {
		final String[] messages67 = {"Deep in a strange building known as Melzar's maze", "located north west of rimmington", "You will need this to get in", "This is the key to the front entrance to the maze"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages67) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						owner.sendMessage("Oziach hands you a key");
						owner.getInventory().add(new InvItem(421, 1));
						owner.sendInventory();
						final String[] options52 = {"Where can I get an antidragon shield?", "Where is the second piece of map?", "Where is the third piece of map?", "Ok. I'll try and get everything together"};
						owner.setBusy(false);
						owner.sendMenu(options52);
						owner.setMenuHandler(new MenuHandler(options52) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										shield(npc, owner);
										break;
									case 1:
										secondPiece(npc, owner);
										break;
									case 2:
										thirdPiece(npc, owner);
										break;
									case 3:
										getEverything(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void secondPiece(final Npc npc, final Player owner) {
		final String[] messages68 = {"You will need to talk to the oracle on the ice mountain"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages68) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options53 = {"Where can I get an antidragon shield?", "Where is the first piece of map?", "Where is the third piece of map?", "Ok, I'll try and get everything together"};
						owner.setBusy(false);
						owner.sendMenu(options53);
						owner.setMenuHandler(new MenuHandler(options53) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										shield(npc, owner);
										break;
									case 1:
										firstPiece(npc, owner);
										break;
									case 2:
										thirdPiece(npc, owner);
										break;
									case 3:
										getEverything(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void thirdPiece(final Npc npc, final Player owner) {
		final String[] messages69 = {"That was stolen by one of the goblins from the goblin village"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages69) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options54 = {"Where can I get an antidragon shield?", "Where is the first piece of map?", "Where is the second piece of map?", "Ok, I'll try and get everything together"};
						owner.setBusy(false);
						owner.sendMenu(options54);
						owner.setMenuHandler(new MenuHandler(options54) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										shield(npc, owner);
										break;
									case 1:
										firstPiece(npc, owner);
										break;
									case 2:
										secondPiece(npc, owner);
										break;
									case 3:
										getEverything(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void noQuestStarted(final Npc npc, final Player owner) {
		final String[] messages3 = {"Aye tiz a fair day my friend"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages3, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options1 = {"I'm not your friend", "Yes it's a very nice day"};
						owner.setBusy(false);
						owner.sendMenu(options1);
						owner.setMenuHandler(new MenuHandler(options1) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										friend(npc, owner);
										break;
									case 1:
										niceDay(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void niceDay(final Npc npc, final Player owner) {
		final String[] messages4 = {"Aye may the Gods walk by your side"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages4) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void friend(final Npc npc, final Player owner) {
		final String[] messages5 = {"I'd be surprised if you're anyone's friend with that sort of manners"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages5) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
}