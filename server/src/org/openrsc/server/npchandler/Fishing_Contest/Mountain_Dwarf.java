/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/

//scripted by Mr. Zain

package org.openrsc.server.npchandler.Fishing_Contest;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.logging.Logger;
import org.openrsc.server.logging.model.eventLog;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.model.World;
import org.openrsc.server.npchandler.NpcHandler;
import org.openrsc.server.util.DataConversions;



public class Mountain_Dwarf implements NpcHandler {

	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(26);
		if(q != null) {
			if(q.finished()) {
				finished(npc, owner);
			} else {
				switch(q.getStage()) {
					case 0:
						noQuestStarted(npc, owner);
						break;
					case 1:
						questStage1(npc, owner);
						break;
					case 2:
						questStage1(npc, owner);
						break;
					case 3:
						questStage1(npc, owner);
						break;
					case 4:
						questStage4(npc, owner);
						break;
				}
			}
		} else {
			noQuestStarted(npc, owner);
		}
	}
	
	private void noQuestStarted(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hmmph, what do you want?"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options107 = {"I was wondering what was down those stairs?", "I was just stopping to say hello"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										cantGoDown(npc, owner);
										break;
									case 1:
										owner.setBusy(false);
										npc.unblock();
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void cantGoDown(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You can't go down there"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options107 = {"I didn't want to anyway", "Why not?", "I'm bigger than you, let me by"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										owner.setBusy(false);
										npc.unblock();
									break;
									case 1:
										whyNot(npc, owner);
									break;
									case 2:
										size(npc, owner);
									break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void whyNot(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"This is the home of the mountain dwarves", "How would you like it if I wanted to take a short cut through your home?"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options107 = {"Ooh is this a short cut to somewhere?", "Oh sorry I hadn't realised it was private", "If you were my friend I wouldn't mind it"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										shortCutInfo(npc, owner);
										break;
									case 1:
										owner.setBusy(false);
										npc.unblock();
										break;
									case 2:
										friend(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void friend(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yes, but I don't even know you"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options107 = {"Well lets be friends", "You're a grumpy little man aren't you?"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										trust(npc, owner);
										break;
									case 1:
										grumpy(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void trust(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I don't make friends easily", "People need to earn my trust first"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options107 = {"And how am I meant to do that?", "You're a grumpy little man aren't you?"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										questInfo(npc, owner);
										break;
									case 1:
										grumpy(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void questInfo(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"My we are the persistent one aren't we", "Well there's a certain gold artifact we're after", "We dwarves are big fans of gold", "This artifact is the first prize at the Hemenster fishing competition", "Fortunately we have acquired a pass to enter that competition", "Unfortunately dwarves don't make good fishermen"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options107 = {"Fortunately I'm alright at fishing", "I'm not much of a fisherman either"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										questAccepted(npc, owner);
										break;
									case 1:
										owner.setBusy(false);
										npc.unblock();
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void questAccepted(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Okay I entrust you with our competition pass", "Go to Hemenster and do us proud"}) {
			public void finished() {
			owner.sendMessage("The dwarf gives you a competition pass");
			owner.getInventory().add(719, 1);
			owner.sendInventory();
			owner.addQuest(26, 1);
			owner.incQuestCompletionStage(26);
			owner.setBusy(false);
			npc.unblock();
			}
		});
	}
	
	private void questStage1(final Npc npc, final Player owner) {
		if(owner.getInventory().countId(719) < 1) {
			World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Hello again", "I seem to have lost my competition pass"}, true) {
				public void finished() {
					owner.sendMessage("The dwarf gives you a competition pass");
					owner.getInventory().add(719, 1);
					owner.sendInventory();
					World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Be careful with this one", "Get going to Hemenster and do us proud"}) {
						public void finished() {
							owner.setBusy(false);
							npc.unblock();
						}
					});	
				}
			});
		}
		else
		if(owner.getInventory().countId(719) > 0) {
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Have you won yet?"}, true) {
				public void finished() {
					World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"No, not yet"}) {
						public void finished() {
							World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Well get going to Hemenster and do us proud"}) {
								public void finished() {
									owner.setBusy(false);
									npc.unblock();	
								}
							});
						}
					});		
				}
			});
		}
	}
	
	private void questStage4(final Npc npc, final Player owner) {
		if(owner.getInventory().countId(720) < 1) {
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Have you won yet?"}, true) {
				public void finished() {
					World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Yes, I have. But I seem to have lost the trophy"}) {
						public void finished() {
							World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Well go back to Hemenster and get it back"}) {
								public void finished() {
									owner.setBusy(false);
									npc.unblock();	
								}
							});
						}
					});		
				}
			});
		}
		else
		if(owner.getInventory().countId(720) > 0) {
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Have you won yet?"}, true) {
				public void finished() {
					World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Yes I have"}) {
						public void finished() {
							World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Well done, so where is the trophy?"}) {
								public void finished() {
									World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I have it right here"}) {
										public void finished() {
											if(owner.getInventory().countId(719) > 1) {
											owner.getInventory().remove(719, 1);
											owner.sendInventory();
											}
											owner.getInventory().remove(720, 1);
											owner.sendInventory();
											owner.sendMessage("You give the trophy to the dwarf");
											World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Okay we will let you in now"}) {
												public void finished() {
													owner.finishQuest(26);
													owner.incQuestExp(10, 3225);
													owner.sendStat(10);
													owner.sendMessage("@gre@You have completed the Fishing Contest quest!");
													owner.sendMessage("@gre@You have been awarded 1 quest point!");
													owner.setBusy(false);
													npc.unblock();	
													Logger.log(new eventLog(owner.getUsernameHash(), owner.getAccount(), owner.getIP(), DataConversions.getTimeStamp(), "<strong>" + owner.getUsername() + "</strong>" + " has completed the <span class=\"recent_quest\">Fishing Contest</span> quest!"));
												}
											});
										}	
									});		
								}
							});
						}
					});		
				}
			});
		}
	}
	
	private void shortCutInfo(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yes, it leads to the other side of whitewolf mountain", "But it's only for dwarves"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options107 = {"Oh sorry I hadn't realised it was private", "If you were my friend I wouldn't mind it"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										owner.setBusy(false);
										npc.unblock();
										break;
									case 1:
										friend(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	
	private void size(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Size isn't everything", "I'd be able to beat you with my eyes closed"}) {
			public void finished() {
			owner.setBusy(false);
			npc.unblock();
			}
		});
	}
	
	private void grumpy(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hmmph, if you say so.."}) 
		{
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void finished(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hello again", "thanks again for the trophy", "It's so shiny"}) {
			public void finished() {
				owner.sendMessage("The dwarf grins");
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"No problem friend"}) {
					public void finished() {
					owner.setBusy(false);
					npc.unblock();
					}
				});
			}
		});
	}
	
}