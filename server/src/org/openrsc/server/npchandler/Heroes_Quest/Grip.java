/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent

script put together by Mr.Zain
*/
package org.openrsc.server.npchandler.Heroes_Quest;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.model.World;
import org.openrsc.server.npchandler.NpcHandler;



public class Grip implements NpcHandler 
{

	public void handleNpc(final Npc npc, final Player owner) throws Exception 
	{
	
		npc.blockedBy(owner);
		owner.setBusy(true);
		
		Quest q = owner.getQuest(20);
		Quest blackarm = owner.getQuest(51);
		Quest phoenix = owner.getQuest(52);
		
		if (q == null)
		{
			noQuestStarted(npc, owner);
		}	
		else 
		{
			if (q != null) 
			{
				if (phoenix != null && phoenix.finished()) 
				{
					noQuestStarted(npc, owner);
				} 
				else 
				{
					if (q.getStage() == 4)
					{
						if (owner.getInventory().countId(582) > 0)
						{
							hasKey(npc, owner);
						}
						else
						{
							noKey(npc, owner);
						}
					}
					else
					{
						noQuestStarted(npc, owner);
					}
				}
			} 
		}
	}
	

	private void noQuestStarted(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Hi"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You shouldn't be in here"}) 
				{
					public void finished() 
					{
						owner.teleport(463, 682);
						owner.setBusy(false);
						npc.unblock();
					}
				});
			}
		});
	}
	
	
	private void hasKey(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Hello grip", "I still haven't found out what that key is for"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"If you lose it come to me and I will give you another"}) 
				{
					public void finished() 
					{
						owner.setBusy(false);
						npc.unblock();
					}
				});
			}
		});
	}

	
	private void noKey(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Hi I am Hartigen", "I've come to take the job as your deputy"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ah good at last, you took your time getting here", "Now let me see", "Your quarters will be that room nearest the sink", "I'll get your hours of duty sorted in a bit", "Oh and have you got your I.D paper?", "Internal security is almost as important as external security for a guard"}) 
				{
					public void finished() 
					{
						if (owner.getInventory().countId(573) > 0)
						{
							owner.sendMessage("You show grip your ID paper");
							World.getDelayedEventHandler().add(new SingleEvent(owner, 2000)
							{
								public void action()
								{
									final String[] options107 = {"So can I guard the treasure room please?", "So what do my duties involve?", "Well I'd better sort my new room out"};
									owner.setBusy(false);
									owner.sendMenu(options107);
									owner.setMenuHandler(new MenuHandler(options107) 
									{
										public void handleReply(final int option, final String reply)
										{
											owner.setBusy(true);
											for(Player informee : owner.getViewArea().getPlayersInView())
											{
												informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
											}
											switch(option) 
											{
												case 0:
													World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Sorry, we already have top ranking guards for that job"})
													{
														public void finished()
														{
															owner.setBusy(false);
															npc.unblock();
														}
													});
												break;
												case 1:
													guardDuties(npc, owner);
												break;
												case 2:
													owner.setBusy(false);
													npc.unblock();
												break;
											}
										}
									});
								}
							});
						}
						else
						{
							World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I don't seem to have it with me", "Let me go get it"})
							{
								public void finished()
								{
									owner.setBusy(false);
									npc.unblock();
								}
							});
						}
					}
				});
			}
		});
	}
	
	private void guardDuties(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You'll have various guard duty shifts", "I may have specific tasks to give you as they come up", "If anything happens to me you need to take over as head guard", "You'll find Important keys to the treasure room and Pete's Quarters", "Inside my jacket"})
		{
			public void finished()
			{
				World.getDelayedEventHandler().add(new SingleEvent(owner, 2000)
				{
					public void action()
					{
						final String[] options107 = {"So can I guard the treasure room please?", "Well I'd better sort my new room out", "Anything I can do now?"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) 
						{
							public void handleReply(final int option, final String reply)
							{
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView())
								{
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) 
								{
									case 0:
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Sorry, we already have top ranking guards for that job"})
										{
											public void finished()
											{
												owner.setBusy(false);
												npc.unblock();
											}
										});
									break;
									case 1:
										owner.setBusy(false);
										npc.unblock();
									break;
									case 2:
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hmm, well you could find out what this key does", "Apparently it's to something in this building", "Though I don't for the life of me know what"})
										{
											public void finished()
											{
												owner.sendMessage("Grip hands you a key");
												owner.getInventory().add(582, 1);
												owner.sendInventory();
												owner.setBusy(false);
												npc.unblock();
											}
										});
									break;
								}
							}
						});
					}
				});
			}
		});
	}

}