/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/
package org.openrsc.server.npchandler.Merlins_Crystal;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.model.World;
import org.openrsc.server.npchandler.NpcHandler;



public class Morgan_Le_Faye implements NpcHandler {

	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(22);
		if(q != null) {
			if(q.finished()) {
				noQuestStarted(npc, owner);
			} else {
				switch(q.getStage()) {
					case 3:
						questStage3(npc, owner);
						break;
					default:
						noQuestStarted(npc, owner);
				}
			}
		} else {
			noQuestStarted(npc, owner);
		}
	}
	
	private void noQuestStarted(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hey what are you doing here?!", "Begone!"}, true) {
			public void finished() {
				owner.sendMessage("The witch casts some magic...");
				owner.teleport(470, 518, false);
				owner.sendMessage("...you end up outside the castle");
				owner.setBusy(false);
				npc.unblock();	
			}
		});
	}

	private void questStage3(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Who are you?!", "What do you want!?"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options107 = {"Tell me how to free Merlin or I will kill you!", "Hah, your nose is big!"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										instructions(npc, owner);
										break;
									case 1:
										noseBig(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	
	private void noseBig(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You rude filth..", "Begone!"}) {
			public void finished() {
				owner.sendMessage("The witch casts some magic...");
				owner.teleport(470, 518, false);
				owner.sendMessage("...you end up outside the castle");
				owner.setBusy(false);
				npc.unblock();	
			}
		});
	}
	
	
	private void instructions(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"eek!", "ok don't hurt me!", "I will tell you..", "Go to the north-east side of camelot castle", "with these 2 items, Bat bones and a lit black candle", "drop the bat bones on the zodiac sign", "then a demon will appear", "he will lift the curse of the crystal", "if you say these words...", "Snarthon Candtrick Termanto" }) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options107 = {"Could you repeat that please?", "Thank you for your cooperation"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										instructions1(npc, owner);
										break;
									case 1:
										acknowledged(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	
	private void instructions1(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ok I will tell you again", "Go to the north-east side of camelot castle", "with these 2 items, Bat bones and a lit black candle", "drop the bat bones on the zodiac sign", "then a demon will appear", "he will lift the curse of the crystal", "if you say these words...", "Snarthon Candtrick Termanto" }) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options107 = {"Could you repeat that please?", "Thank you for your cooperation"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										instructions1(npc, owner);
										break;
									case 1:
										acknowledged(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	
	private void acknowledged(final Npc npc, final Player owner) {
			owner.incQuestCompletionStage(22);
			owner.setBusy(false);
			npc.unblock();	
	}
	
	
	
	
	
	
	
}