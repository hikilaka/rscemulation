/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/
package org.openrsc.server.npchandler.Phoenix_Mini_Quest;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.InvItem;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Quest;
import org.openrsc.server.model.World;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.model.Player;
import org.openrsc.server.npchandler.NpcHandler;

public class Man implements NpcHandler 
{
	
	
	
	public void handleNpc(final Npc npc, final Player owner) throws Exception 
	{
	
	
		npc.blockedBy(owner);
		owner.setBusy(true);
		
		
		Quest heroesQuest = owner.getQuest(20);
		Quest shield = owner.getQuest(13);
		Quest phoenix = owner.getQuest(52);
		Quest blackarm = owner.getQuest(51);
		
		
		if (heroesQuest == null) 
		{
			if(blackarm != null) 
			{
				if(blackarm.finished()) 
				{
					attack(npc, owner);
				}
				else 
				{
					if(phoenix != null) 
					{
						if(phoenix.finished()) 
						{
							if(owner.getInventory().countId(48) == 0) 
							{
								noHasKey(npc, owner);
							} 
							else 
							{
								hasKey(npc, owner);
							}
						} 
						else 
						{
							if(owner.getInventory().countId(49) > 0) 
							{
								hasReport(npc, owner);
							} 
							else 
							{
								noHasReport(npc, owner);
							}
						}
					} 
					else 
					{
						if(shield != null) 
						{
							if(shield.getStage() > 2) 
							{
								questNotStarted2(npc, owner);
							} 
							else 
							{
								questNotStarted(npc, owner);
							}
						} 
						else 
						{
							questNotStarted(npc, owner);
						}
					}
				}
			} 
			else 
			{
				if(phoenix != null) 
				{
					if(phoenix.finished()) 
					{
						if(owner.getInventory().countId(48) == 0) 
						{
							noHasKey(npc, owner);
						} 
						else 
						{
							hasKey(npc, owner);
						}
					} 
					else 
					{
						if(owner.getInventory().countId(49) > 0) 
						{
							hasReport(npc, owner);
						} 
						else 
						{
							noHasReport(npc, owner);
						}
					}
				} 
				else 
				{
					if(shield != null) 
					{
						if(shield.getStage() > 2)
						{
							questNotStarted2(npc, owner);
						} 
						else 
						{
							questNotStarted(npc, owner);	
						}
					} 
					else 
					{
						questNotStarted(npc, owner);
					}
				}
			}
		}
		else 
		{
			if (heroesQuest != null)
			{
				if (heroesQuest.finished()) 
				{
					if (blackarm.finished()) 
					{
						attack(npc, owner);
					}
					else
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"good work on getting that candlestick", "scarface pete will think twice", "before messing with us again"}, true) 
						{
							public void finished() 
							{
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				}
				else
				{
					if(blackarm != null && blackarm.finished()) 
					{
						attack(npc, owner);
					}
					else
					{
						switch(heroesQuest.getStage())
						{
							case 1:
								thievesArmBand1(npc, owner);
							break;
							case 2:
							case 3:
								noCandle(npc, owner);
							break;
							case 4:
								if (owner.getInventory().countId(585) >= 1)
								{
									hasCandle(npc, owner);
								}
								else
								{
									noCandle(npc, owner);
								}
							break;
							case 5:
								thievesArmBand3(npc, owner);
							break;
						}
					}
				}
			}
		}
	}
	
	
	private void thievesArmBand1(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hello fellow gang member", "what can I do for you?"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) 
				{
					public void action() 
					{
						final String[] options107 = {"Where can I find a master thief armband?", "Nothing thanks"};
						owner.setBusy(false);
						owner.sendMenu(options107);
						owner.setMenuHandler(new MenuHandler(options107) 
						{
							public void handleReply(final int option, final String reply) 
							{
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) 
								{
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) 
								{
									case 0:
										armBand(npc, owner);
										break;
									case 1:
										goodBye(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	
	private void armBand(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"A master thief armband you say? ", "that is what we reward thieves with", "When they have stolen something very valuable"}) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"So your saying that I need to steal something valuable?"}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Exactly", "Steal scarface pete's candlestick", "and bring it back to me", "His mansion is located in brimhaven", "our field agents Charlie and alfonse", "have already set up at brimhaven", "in a pub called shrimp and parrot", "meet them there", "remember the gang password is..", "Gherkin"}) 
						{
							public void finished() 
							{
								World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) 
								{
									public void action() 
									{
										final String[] options107 = {"I accept your challenge", "This sounds too dangerous for me"};
										owner.setBusy(false);
										owner.sendMenu(options107);
										owner.setMenuHandler(new MenuHandler(options107) 
										{
											public void handleReply(final int option, final String reply) 
											{
											owner.setBusy(true);
												for(Player informee : owner.getViewArea().getPlayersInView()) 
												{
												informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
												}
												switch(option) 
												{
													case 0:
														acceptedCandleJob(npc, owner);
													break;
													case 1:
														goodBye(npc, owner);
													break;
												}
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	
	
	private void noCandle(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hey, have you got that candlestick yet?"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"No not yet"}) 
				{
					public void finished()
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ok well come back to me when you have"}) 
						{
							public void finished() 
							{
							owner.setBusy(false);
							npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
	
	
	private void hasCandle(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hey, have you got that candlestick yet?"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Yes I have it right here"}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Good stuff, heres your master thief armband"}) 
						{
							public void finished() 
							{
								owner.getInventory().remove(585, 1);
								owner.getInventory().add(586, 1);
								owner.sendInventory();	
								owner.incQuestCompletionStage(20);
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
	
	private void acceptedCandleJob(final Npc npc, final Player owner)
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Good luck"})
		{
			public void finished() 
			{
				owner.incQuestCompletionStage(20);
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	
	private void thievesArmBand3(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"good work on getting that candlestick", "scarface pete will think twice", "before messing with us again"}, true) 
		{
			public void finished() 
			{
				if (owner.getBank().countId(586) >= 1 || owner.getInventory().countId(586) >= 1)
				{
					World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I seem to have lost my armband", "Could I have another?"})
					{
						public void finished() 
						{
							World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Sure here you go"})
							{
								public void finished() 
								{
									owner.sendMessage("Straven gives you another armband");
									owner.getInventory().add(586, 1);
									owner.sendInventory();
									owner.setBusy(false);
									npc.unblock();
								}
							});
						}
					});
				}
				else
				{
					owner.setBusy(false);
					npc.unblock();
				}
			}
		});
	}
	
	
	private void goodBye(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Very well.."}) 
		{
			public void finished() 
			{
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	
	
	
	private void noHasKey(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Greetings fellow gang member"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I have lost the key you gave me"}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You need to be more careful", "We don't want that key falling into the wrong hands", "Ah well", "Have this spare"}) 
						{
							public void finished() 
							{
								owner.sendMessage("Straven hands you a key");
								owner.getInventory().add(new InvItem(48, 1));
								owner.sendInventory();
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}

	private final void hasKey(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Greetings fellow gang member"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) 
				{
					public void action() 
					{
						final String[] options5 = {"I've heard you've got some cool treasures in this place", "Any suggestions for where I can go thieving?", "Where's the Blackarm gang hideout?"};
						owner.setBusy(false);
						owner.sendMenu(options5);
						owner.setMenuHandler(new MenuHandler(options5) 
						{
							public void handleReply(final int option, final String reply) 
							{
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) 
								{
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) 
								{
									case 0:
										treasures(npc, owner);
										break;
									case 1:
										suggestions(npc, owner);
										break;
									case 2:
										hideout(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
		
	private void hideout(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I wanna go sabotage em"}) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"That would be a little tricky", "Their security is pretty good", "Not as good as ours obviously", "But still good", "If you really want to go there", "It is in the alleyway", "To the west as you come in the south gate", "One of our operatives is often near the alley", "A red haired tramp", "He may be able to give you some ideas"}) {
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Thanks for the help"}) 
						{
							public void finished() 
							{
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
	private void suggestions(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You can always try the market", "Lots of opportunity there"}) 
		{
			public void finished() 
			{
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void treasures(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Oh yeah, we've stolen some cool stuff in our time", "The candlesticks down here", "Were quite a challenge to get out the palace"}) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"And the shield of Arrav", "I heard you got that"}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hmm", "that was a while ago", "We don't even have the shield anymore", "About 5 years ago", "We had a massive fight in our gang", "The sheild got broken in half during the fight", "Shortly after the fight", "Some gang members decided", "They didn't want to be part of our gang anymore", "So they split off to form their own gang", "The black arm gang", "On their way out", "They looted what treasures they could from us", "Which included one of the halves of the shield", "We've been rivals with the black arms ever since"}) 
						{
							public void finished() 
							{
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
	private final void attack(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hey get away from there", "Black Arm dog"}, true) 
		{
			public void finished() 
			{
				owner.setBusy(false);
				npc.unblock();
				npc.setAggressive(owner);
			}
		});
	}
	
	private final void hasReport(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"How's your little mission going?"}) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I have the intelligence report!"}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Let's see it then."}) 
						{
							public void finished() 
							{
								owner.sendMessage("You hand over the report. The man reads the report.");
								owner.getInventory().remove(new InvItem(49, 1));
								owner.sendInventory();
								World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) 
								{
									public void action() 
									{
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yes. Yes, this is very good.", "Ok! You can join the Phoenix Gang! I am Straven, one of the gang leaders."}) 
										{
											public void finished() 
											{
												World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Nice to meet you."}) 
												{
													public void finished() 
													{
														World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Take this key"}) 
														{
															public void finished() 
															{
																owner.sendMessage("Straven hands you a key.");
																owner.getInventory().add(new InvItem(48,1));
																owner.sendInventory();
																World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) 
																{
																	public void action() 
																	{
																		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"It will grant you access to our weapons cache.", "Be careful not to lose it"}) 
																		{
																			public void finished() 
																			{
																				owner.finishQuest(52);
																				owner.setBusy(false);
																				npc.unblock();
																			}
																		});
																	}
																});
															}
														});
													}
												});
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private final void noHasReport(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"How's your little mission going?"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I haven't managed to find the report yet..."}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You need to kill Jonny the Beard, who should be in the Blue Moon Inn.", "...I would guess. Not being a member of the Phoenix Gang and all."}) 
						{
							public void finished() 
							{
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
	private final void questNotStarted(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"What's through that door?"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Heh you can't go in there", "Only authorised personnel of the VTAM corporation are allowed beyond this point"}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) 
						{
							public void action() 
							{
								final String[] options2 = {"How do I get a job with the VTAM corporation?", "Why not?"};
								owner.setBusy(false);
								owner.sendMenu(options2);
								owner.setMenuHandler(new MenuHandler(options2) 
								{
									public void handleReply(final int option, final String reply) 
									{
										owner.setBusy(true);
										for(Player informee : owner.getViewArea().getPlayersInView()) 
										{
											informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
										}
										switch(option) 
										{
											case 0:
												vtamCorp(npc, owner);
												break;
											case 1:
												whyNot(npc, owner);
												break;
										}
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private final void questNotStarted2(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"What's through that door?"}, true) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Heh you can't go in there", "Only authorised personnel of the VTAM corporation are allowed beyond this point"}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) 
						{
							public void action() 
							{
								final String[] options2 = {"I know who you are", "How do I get a job with the VTAM corporation?", "Why not?"};
								owner.setBusy(false);
								owner.sendMenu(options2);
								owner.setMenuHandler(new MenuHandler(options2) 
								{
									public void handleReply(final int option, final String reply) 
									{
										owner.setBusy(true);
										for(Player informee : owner.getViewArea().getPlayersInView()) 
										{
											informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
										}
										switch(option) 
										{
											case 0:
												knowYou(npc, owner);
												break;
											case 1:
												vtamCorp(npc, owner);
												break;
											case 2:
												whyNot(npc, owner);
												break;
										}
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void knowYou(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I see", "Carry on"}) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"This is the headquarters of the Phoenix Gang", "The most powerful crime gang this city has seen"}) 
				{
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"And supposing we were this crime gang", "What would you want with us?"}) 
						{
							public void finished() 
							{
								World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) 
								{
									public void action() 
									{
										final String[] options3 = {"I'd like to offer you my services", "I want nothing. I was just making sure you were them"};
										owner.setBusy(false);
										owner.sendMenu(options3);
										owner.setMenuHandler(new MenuHandler(options3) 
										{
											public void handleReply(final int option, final String reply) 
											{
												owner.setBusy(true);
												for(Player informee : owner.getViewArea().getPlayersInView()) 
												{
													informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
												}
												switch(option) 
												{
													case 0:
														services(npc, owner);
														break;
													case 1:
														makingSure(npc, owner);
														break;
												}
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void vtamCorp(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Get a copy of the Varrock Herald", "If we have any positions right now", "They'll be advertised in there"}) 
		{
			public void finished() 
			{
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void whyNot(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Sorry that is classified information"}) 
		{
			public void finished() 
			{
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void services(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You mean you'd like to join the Phoenix Gang?", "Well the Phoenix Gang doesn't let people join just like that", "You can't be too careful, you understand", "Generally someone has to prove their loyalty before they can join"}) 
		{
			public void finished() 
			{
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"How would I go about this?"}) {
					public void finished() 
					{
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Let me think", "I have an idea", "A rival gang of ours", "Called the Black Arm Gang", "Is meant to be meeting their contact from Port Sarim today", "In the blue moon inn", "By the south entrance to this city", "The name of the contact is Jonny the Beard", "Kill him and bring back his intelligence report"}) 
						{
							public void finished() 
							{
								World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I'll get on it"}) 
								{
									public void finished() 
									{
										owner.addQuest(52, 0);
										owner.setBusy(false);
										npc.unblock();
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void makingSure(final Npc npc, final Player owner) 
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Well stop wasting my time"}) 
		{
			public void finished()
			{
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
}