/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/
package org.openrsc.server.npchandler.Prince_Ali_Rescue;

import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.InvItem;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.World;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.npchandler.NpcHandler;
public class Keli implements NpcHandler {

	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(10);
		if(q != null) {
			if(q.finished()) {
				questFinished(npc, owner);
			} else {
				switch(q.getStage()) {
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:	
						questNotStarted(npc, owner);
						break;
					case 5:
						questFinished(npc, owner);
				}
			}
		} else {
			questNotStarted(npc, owner);
		}
	}

	private final void questFinished(final Npc npc, final Player owner) {
		final String[] messages0 = {"You tricked me, and tied me up", "You should not stay here if you want to remain alive", "Guards! Guards! Kill this stranger"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages0, true) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private final void questNotStarted(final Npc npc, final Player owner) {
		final String[] messages0 = {"Are you the famous Lady Keli?", "Leader of the toughest gang of mercenary killers around?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages0, true) {
			public void finished() {
				final String[] messages1 = {"I am Keli, you have heard of me then"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages1) {
					public void finished() {
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
							public void action() {
								final String[] options0 = {"Heard of you? you are famous in Runescape!", "I have heard a little, but I think Katrine is tougher", "I have heard rumours that you kill people", "No I have never really heard of you"};
								owner.setBusy(false);
								owner.sendMenu(options0);
								owner.setMenuHandler(new MenuHandler(options0) {
									public void handleReply(final int option, final String reply) {
										owner.setBusy(true);
										for(Player informee : owner.getViewArea().getPlayersInView()) {
											informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
										}
										switch(option) {
											case 0:
												famous(npc, owner);
												break;
											case 1:
												katrine(npc, owner);
												break;
											case 2:
												killPeople(npc, owner);
												break;
											case 3:
												neverHeard(npc, owner);
												break;
										}
									}
								});
							}
						});
					}
				});
			}
		});
	}

	private void famous(final Npc npc, final Player owner) {
		final String[] messages2 = {"Thats very kind of you to say. Reputations are not easily earnt", "I have managed to succeed where many fail"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages2) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options1 = {"I think Katrine is still tougher", "What is your latest plan then?", "You must have trained a lot for this work", "I should not disturb someone as tough as you"};
						owner.setBusy(false);
						owner.sendMenu(options1);
						owner.setMenuHandler(new MenuHandler(options1) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										katrine(npc, owner);
										break;
									case 1:
										latestPlan(npc, owner);
										break;
									case 2:
										trained(npc, owner);
										break;
									case 3:
										disturb(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void katrine(final Npc npc, final Player owner) {
		final String[] messages3 = {"Well you can think that all you like", "I know those blackarm cowards dare not leave the city", "Out here, I am toughest. You can tell them that!", "Now get out of my sight, before I call my guards"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages3) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void latestPlan(final Npc npc, final Player owner) {
		final String[] messages4 = {"Of course, you need not go into specific details"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages4) {
			public void finished() {
				final String[] messages5 = {"Well, I can tell you, I have a valuable prisoner here in my cells", "I can expect a high reward to be paid very soon for this guy", "I can't tell you who he is, but he is a lot colder now"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages5) {
					public void finished() {
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
							public void action() {
								final String[] options2 = {"Aha, I see. You must have been very skillful", "Thats great, are you sure they will pay?", "Can you be sure they will not try to get him out?", "I should not disturb someone as tough as you"};
								owner.setBusy(false);
								owner.sendMenu(options2);
								owner.setMenuHandler(new MenuHandler(options2) {
									public void handleReply(final int option, final String reply) {
										owner.setBusy(true);
										for(Player informee : owner.getViewArea().getPlayersInView()) {
											informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
										}
										switch(option) {
											case 0:
												skillful(npc, owner);
												break;
											case 1:
												theyPay(npc, owner);
												break;
											case 2:
												getHimOut(npc, owner);
												break;
											case 3:
												disturb(npc, owner);
												break;
										}
									}
								});
							}
						});
					}
				});
			}
		});
	}

	private void skillful(final Npc npc, final Player owner) {
		final String[] messages6 = {"Yes, I did most of the work, we had to grab the Pr...", "er, we had to grab him under cover of ten of his bodyguards", "It was a stroke of genius"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages6) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options3 = {"Are you sure they will pay?", "Can you be sure they will not try to get him out?", "I should not disturb someone as tough as you"};
						owner.setBusy(false);
						owner.sendMenu(options3);
						owner.setMenuHandler(new MenuHandler(options3) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										theyPay(npc, owner);
										break;
									case 1:
										getHimOut(npc, owner);
										break;
									case 2:
										disturb(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void theyPay(final Npc npc, final Player owner) {
		final String[] messages7 = {"They will pay, or we will cut his hair off and send it to them"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages7) {
			public void finished() {
				final String[] messages8 = {"Don't you think that something tougher, maybe cut his finger off?"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages8) {
					public void finished() {
						final String[] messages9 = {"Thats a good idea, I could use talented people like you", "I may call on you if I need work doing"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages9) {
							public void finished() {
								World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
									public void action() {
										final String[] options4 = {"You must have been very skillful", "Can you be sure they will not try to get him out?", "I should not disturb someone as tough as you"};
										owner.setBusy(false);
										owner.sendMenu(options4);
										owner.setMenuHandler(new MenuHandler(options4) {
											public void handleReply(final int option, final String reply) {
												owner.setBusy(true);
												for(Player informee : owner.getViewArea().getPlayersInView()) {
													informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
												}
												switch(option) {
													case 0:
														skillful(npc, owner);
														break;
													case 1:
														getHimOut(npc, owner);
														break;
													case 2:
														disturb(npc, owner);
														break;
												}
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}

	private void getHimOut(final Npc npc, final Player owner) {
		final String[] messages10 = {"There is no way to release him", "The only key to the door is on a chain around my neck", "And the locksmith who made the lock,", "died suddenly when he had finished", "There is not another key like this in the world"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages10) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options5 = {"Could I see the key please", "That is a good way to keep secrets", "I should not disturb someone as tough as you"};
						owner.setBusy(false);
						owner.sendMenu(options5);
						owner.setMenuHandler(new MenuHandler(options5) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										seeKey(npc, owner);
										break;
									case 1:
										oneWay(npc, owner);
										break;
									case 2:
										disturb(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void seeKey(final Npc npc, final Player owner) {
		final String[] messages11 = {"It would be something I can tell my grandchildren", "When you are even more famous when you are now"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages11) {
			public void finished() {
				final String[] messages12 = {"As you put it that way, I am sure you can see it", "You cannot steal the key, it is on an Adamantite chain", "I cannot see the harm"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages12) {
					public void finished() {
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
							public void action() {
								owner.sendMessage("Keli shows you a small key on a strong looking chain");
								Quest q = owner.getQuest(10);
								if(q != null) {
									if(q.getStage() > 0 && q.getStage() < 5) {
										final String[] options0 = {"Could I touch the key for a moment please", "I should not disturb someone as tough as you"};
										owner.setBusy(false);
										owner.sendMenu(options0);
										owner.setMenuHandler(new MenuHandler(options0) {
											public void handleReply(final int option, final String reply) {
												owner.setBusy(true);
												for(Player informee : owner.getViewArea().getPlayersInView()) {
													informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
												}
												switch(option) {
													case 0:
														final String[] messages12 = {"Only for a moment then"};
														World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages12) {
															public void finished() {
																if(owner.getInventory().countId(243) > 0) {
																	owner.sendMessage("You put a piece of your soft clay in your hand");
																	owner.sendMessage("As you touch the key, you take an imprint of it");
																	owner.getInventory().remove(new InvItem(243, 1));
																	owner.getInventory().add(new InvItem(247, 1));
																	owner.sendInventory();
																}
																World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Thankyou so much, you are too kind. o great Keli"}) {
																	public void finished() {
																		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You are welcome, run along now. I am very busy"}) {
																			public void finished() {
																				owner.setBusy(false);
																				npc.unblock();
																			}
																		});
																	}
																});
															}
														});
														break;
													case 1:
														disturb(npc, owner);
												}
											}
										});
									} else {
										final String[] messages13 = {"There, run along now, I am very busy"};
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages13) {
											public void finished() {
												owner.setBusy(false);
												npc.unblock();
											}
										});
									}
								} else {
									final String[] messages13 = {"There, run along now, I am very busy"};
									World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages13) {
										public void finished() {
											owner.setBusy(false);
											npc.unblock();
										}
									});
								}
							}
						});
					}
				});
			}
		});
	}

	private void oneWay(final Npc npc, final Player owner) {
		final String[] messages14 = {"It is the best way I know", "Dead men tell no tales"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages14) {
			public void finished() {
				final String[] messages15 = {"I am glad I know none of your secrets, Keli"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages15) {
					public void finished() {
						owner.setBusy(false);
						npc.unblock();
					}
				});
			}
		});
	}

	private void disturb(final Npc npc, final Player owner) {
		final String[] messages16 = {"I need to do a lot of work, goodbye", "When you get a little tougher, maybe I will give you a job"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages16) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void trained(final Npc npc, final Player owner) {
		final String[] messages17 = {"I have used a sword since I was a small girl", "I stabbed three people before I was 6 years old"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages17) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options6 = {"What is your latest plan then?", "You must have trained a lot for this work", "I think Katrine is still tougher"};
						owner.setBusy(false);
						owner.sendMenu(options6);
						owner.setMenuHandler(new MenuHandler(options6) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										latestPlan(npc, owner);
										break;
									case 1:
										trained(npc, owner);
										break;
									case 2:
										katrine(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void neverHeard(final Npc npc, final Player owner) {
		final String[] messages18 = {"You must be new to this land then", "EVERYONE knows of Lady Keli and her prowess with the sword"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages18) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options7 = {"No, still doesn't ring a bell", "Yes, of course I have heard of you", "You must have trained a lot for this work", "I should not disturb someone as tough as you"};
						owner.setBusy(false);
						owner.sendMenu(options7);
						owner.setMenuHandler(new MenuHandler(options7) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										aBell(npc, owner);
										break;
									case 1:
										famous(npc, owner);
										break;
									case 2:
										trained(npc, owner);
										break;
									case 3:
										disturb(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void aBell(final Npc npc, final Player owner) {
		final String[] messages19 = {"Well, you know of me now", "I will ring your bell if you do not show respect"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages19) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options8 = {"I do not show respect to killers and hoodlums", "You must have trained a lot for this work", "I should not disturb somoene as tough as you, great lady"};
						owner.setBusy(false);
						owner.sendMenu(options8);
						owner.setMenuHandler(new MenuHandler(options8) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										noRespect(npc, owner);
										break;
									case 1:
										trained(npc, owner);
										break;
									case 2:
										disturb(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void noRespect(final Npc npc, final Player owner) {
		final String[] messages20 = {"You should, you really should", "I am wealthy enough to place a bounty on your head", "Or just remove your head myself", "Now go, I am busy, too busy to fight a would-be hoodlum"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages20) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void killPeople(final Npc npc, final Player owner) {
		final String[] messages21 = {"Theres always someone ready to spread rumours", "I heard a rumour the other day, that some men are wearing skirts", "If one of my men wore a skirt, he would wish he hadn't"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages21) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
}