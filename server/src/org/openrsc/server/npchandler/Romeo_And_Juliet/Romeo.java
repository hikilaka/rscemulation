/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/
package org.openrsc.server.npchandler.Romeo_And_Juliet;

import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.logging.Logger;
import org.openrsc.server.logging.model.eventLog;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.World;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.npchandler.NpcHandler;
import org.openrsc.server.util.DataConversions;

public class Romeo implements NpcHandler {
	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(11);
		if(q != null) {
			if(q.finished()) { //Quest Finished
				questFinished(npc, owner);
			} else {
				switch(q.getStage()) {
					case 0: //Has not talked to Juliet
						questGiven(npc, owner);
						break;
					case 1: //Talked to Juliet
						if(owner.getInventory().countId(56) > 0) {
							hasMessage(npc, owner);
						} else {
							questGiven(npc, owner);
						}
						break;
					case 2: //Looking for Father Lawrence
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Please friend, how goes our quest?", "Father Lawrence must be told. Only he can help"}, true) {
							public void finished() {
								owner.setBusy(false);
								npc.unblock();
							}
						});
						break;
					case 3:	//Looking for Apothecary
						lookingForApothecary(npc, owner);
						break;
					case 4:	//Found Apothecary
						foundApothecary(npc, owner);
						break;
					case 5: //After Juliet has the potion
						julietHasPotion(npc, owner);
						break;
				}
			}
		} else {
			questNotStarted(npc, owner);
		}
	}
	
	private final void foundApothecary(final Npc npc, final Player owner) {
		if(owner.getInventory().countId(57) > 0) {
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ah, you have the potion. I was told what to do by the good Father", "Better get it to Juliet. She knows what is happening"}, true) {
				public void finished() {
					owner.setBusy(false);
					npc.unblock();
				}
			});
		} else {
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I hope the potion is near ready", "It is the last step for the great plan", "I hope i will be with my dear one soon"}, true) {
				public void finished() {
					owner.setBusy(false);
					npc.unblock();
				}
			});			
		}

	}
	
	private final void lookingForApothecary(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Did you find the Father, what did he suggest?"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options2 = {"He sent me to the apothecary", "He seems keen for you to marry Juliet"};
						owner.setBusy(false);
						owner.sendMenu(options2);
						owner.setMenuHandler(new MenuHandler(options2) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I know him. He lives near the town square", "the small house behind the sloped building", "Good Luck"}) {
											public void finished() {
												owner.setBusy(false);
												npc.unblock();
											}
										});
										break;
									case 1:
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I think he wants some peace. He was our messenger", "before you were kind enough to help us"}) {
											public void finished() {
												owner.setBusy(false);
												npc.unblock();
											}
										});
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private final void hasMessage(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Romeo, I have a message from Juliet"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						owner.sendMessage("You pass Juliet's message to Romeo");
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Tragic news. Her father is opposing our marriage", "If her father sees me, he will kill me", "I dare not go near his lands", "She says Father Lawrence can help us", "Please find him for me. Tell him of our plight"}) {
							public void finished() {
								owner.incQuestCompletionStage(11);
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	
	private final void questNotStarted(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Juliet, Juliet, Juliet! Wherefore Art thou?", "Kind friend, Have you seen Juliet?", "Her and her father seem to have disappeared"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options24 = {"Yes, I have seen her", "No, but that's girls for you", "Can I help find her for you?"};
						owner.setBusy(false);
						owner.sendMenu(options24);
						owner.setMenuHandler(new MenuHandler(options24) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I think it was her.  Blonde, stressed"}) {
											public void finished() {
												World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yes, that sounds like her", "Please tell her I long to be with her"}) {
													public void finished() {
														World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
															public void action() {
																final String[] options25 = {"Yes, I will tell her", "Sorry, I am too busy.  Maybe later?"};
																owner.setBusy(false);
																owner.sendMenu(options25);
																owner.setMenuHandler(new MenuHandler(options25) {
																	public void handleReply(final int option, final String reply) {
																		owner.setBusy(true);
																		for(Player informee : owner.getViewArea().getPlayersInView()) {
																			informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
																		}
																		switch(option) {
																			case 0:
																				owner.addQuest(11, 5);
																				owner.setBusy(false);
																				npc.unblock();
																				break;
																			case 1:
																				final String[] messages83 = {"Well if you do find her, I would be most grateful"};
																				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages83) {
																					public void finished() {
																						owner.setBusy(false);
																						npc.unblock();
																					}
																				});
																				break;
																		}
																	}
																});
															}
														});
													}
												});
											}
										});
										break;
									case 1:
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Not my dear Julet.  She is different", "Could you find her for me?", "Please tell her I long to be with her"}) {
											public void finished() {
												World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
													public void action() {
														final String[] options26 = {"Yes, I will tell her how you feel", "I can't, it sounds like work to me"};
														owner.setBusy(false);
														owner.sendMenu(options26);
														owner.setMenuHandler(new MenuHandler(options26) {
															public void handleReply(final int option, final String reply) {
																owner.setBusy(true);
																for(Player informee : owner.getViewArea().getPlayersInView()) {
																	informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
																}
																switch(option) {
																	case 0:
																		owner.addQuest(11, 5);
																		owner.setBusy(false);
																		npc.unblock();
																		break;
																	case 1:
																		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Well, I guess you are not the romantic type", "Goodbye"}) {
																			public void finished() {
																				owner.setBusy(false);
																				npc.unblock();
																			}
																		});
																		break;
																}
															}
														});
													}
												});
											}
										});
										break;
									case 2:
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Oh would you?  That would be wonderful!", "Please tell her I long to be with her"}) {
											public void finished() {
												World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Yes, I will tell her how you feel"}) {
													public void finished() {
														World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You are the savior of my heart, thank you."}) {
															public void finished() {
																World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"err, yes. Ok. That's.....nice."}) {
																	public void finished() {
																		owner.addQuest(11, 5);
																		owner.setBusy(false);
																		npc.unblock();
																	}
																});
															}
														});
													}
												});
											}
										});
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private final void julietHasPotion(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Romeo, It's all set. Juliet has the potion"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ah right", "What potion would that be then?"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"The one to get her to the crypt"}) {
							public void finished() {
								World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ah right", "So she is dead then. Ah that's a shame", "Thanks for your help anyway"}) {
									public void finished() {
										owner.finishQuest(11);
										owner.sendMessage("You have completed the quest of Romeo and Juliet");
										owner.sendMessage("@gre@You have gained 5 quest points");
										owner.setBusy(false);
										npc.unblock();
										Logger.log(new eventLog(owner.getUsernameHash(), owner.getAccount(), owner.getIP(), DataConversions.getTimeStamp(), "<strong>" + owner.getUsername() + "</strong>" + " has completed the <span class=\"recent_quest\">Romeo and Juliet</span> quest!"));
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private final void questGiven(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Please find my Juliet.  I am so, so sad"}, true) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private final void questFinished(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I heard Juliet had died. Terrible business", "Her cousin and I are getting on well though", "Thanks for your help"}, true) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
}