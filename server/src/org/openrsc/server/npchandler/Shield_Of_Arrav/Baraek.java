/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/


// Without fur in inventory

package org.openrsc.server.npchandler.Shield_Of_Arrav;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.InvItem;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.model.World;
import org.openrsc.server.npchandler.NpcHandler;

public class Baraek implements NpcHandler {
	
	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(13);
		if(q != null) {
			if(q.finished()) {
				questNotStarted(npc, owner);
			} else {
				if(q.getStage() == 2) {
					if(owner.getInventory().countId(146) > 0) {
						questUnderwayHasFur(npc, owner);
					} else {
						questUnderwayNoFur(npc, owner);
					}
				} else {
					questNotStarted(npc, owner);
				}
			}
		} else {
			questNotStarted(npc, owner);
		}
	}
	
	private final void questUnderwayNoFur(final Npc npc, final Player owner) {
		final String[] options0 = {"Can you sell me some furs?", "Hello, I am in search of a quest", "Can you tell me where I can find the Phoenix Gang?"};
		owner.setBusy(false);
		owner.sendMenu(options0);
		owner.setMenuHandler(new MenuHandler(options0) {
			public void handleReply(final int option, final String reply) {
				owner.setBusy(true);
				for(Player informee : owner.getViewArea().getPlayersInView()) {
					informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
				}
				switch(option) {
					case 0:
						furs(npc, owner);
						break;
					case 1:
						quest(npc, owner);
						break;
					case 2:
						if(owner.getInventory().countId(10) > 19) {
							findGangHasCash(npc, owner);
						} else {
							findGangNoCash(npc, owner);
						}
						break;
				}
			}
		});
	}
	
	private final void questUnderwayHasFur(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
			public void action() {
				final String[] options0 = {"Can you sell me some furs?", "Hello, I am in search of a quest", "Would you like to buy my furs?", "Can you tell me where I can find the Phoenix Gang?"};
				owner.setBusy(false);
				owner.sendMenu(options0);
				owner.setMenuHandler(new MenuHandler(options0) {
					public void handleReply(final int option, final String reply) {
						owner.setBusy(true);
						for(Player informee : owner.getViewArea().getPlayersInView()) {
							informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
						}
						switch(option) {
							case 0:
								furs(npc, owner);
								break;
							case 1:
								quest(npc, owner);
								break;
							case 2:
								buyMyFur(npc, owner);
								break;
							case 3:
								if(owner.getInventory().countId(10) > 19) {
									findGangHasCash(npc, owner);
								} else {
									findGangNoCash(npc, owner);
								}
								break;
						}
					}
				});
			}
		});
	}
	
	private void findGangHasCash(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ssh quiet down", "You don't want to get me in trouble"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"So do you know where they are?"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I may do", "Though I don't want to get into trouble for revealing their hideout", "Now if I was say 20 gold coins richer", "I may happen to be more inclined to take that sort of risk"}) {
							public void finished() {
								World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
									public void action() {
										final String[] options1 = {"Yes. I'd like to be 20 gold coins richer too.", "Okay, have 20 gold", "No, I don't like things like bribery."};
										owner.setBusy(false);
										owner.sendMenu(options1);
										owner.setMenuHandler(new MenuHandler(options1) {
											public void handleReply(final int option, final String reply) {
												owner.setBusy(true);
												for(Player informee : owner.getViewArea().getPlayersInView()) {
													informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
												}
												switch(option) {
													case 0:
														noDice(npc, owner);
														break;
													case 1:
														paid(npc, owner);
														break;
													case 2:
														noDice(npc, owner);
														break;
												}
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void findGangNoCash(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ssh quiet down", "You don't want to get me in trouble"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"So do you know where they are?"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I may do", "Though I don't want to get int trouble for revealing their hideout", "Now if I was say 20 gold coins richer", "I may happen to be more inclined to take that sort of risk"}) {
							public void finished() {
								World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
									public void action() {
										final String[] options1 = {"Yes. I'd like to be 20 gold coins richer too.", "I haven't got that much", "No, I don't like things like bribery."};
										owner.setBusy(false);
										owner.sendMenu(options1);
										owner.setMenuHandler(new MenuHandler(options1) {
											public void handleReply(final int option, final String reply) {
												owner.setBusy(true);
												for(Player informee : owner.getViewArea().getPlayersInView()) {
													informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
												}
												switch(option) {
													case 0:
														noDice(npc, owner);
														break;
													case 1:
														noDice(npc, owner);
														break;
													case 2:
														noDice(npc, owner);
														break;
												}
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}

	private void noDice(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"In that case I wouldn't dare tell you anything about the Phoenix Gang"}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void paid(final Npc npc, final Player owner) {
		owner.getInventory().remove(new InvItem(10, 20));
		owner.sendInventory();
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ok to get to the gang hideout, enter Varrock through the south gate.", "Then if you take the first turn east", "somewhere along there is an alleyway to the south", "The door at the end of there is the entrance", "to the phoenix gang.", "They're operating under the name of the VTAM Corporation.", "Be careful, the phoenixes aint the types to be messed about."}) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Thanks!"}) {
					public void finished() {
						owner.incQuestCompletionStage(13);
						owner.setBusy(false);
						npc.unblock();
					}
				});
			}
		});
	}
	
	private final void questNotStarted(final Npc npc, final Player owner) {
		if(owner.getInventory().countId(146) > 0) {
			hasFur(npc, owner);
		} else {
			hasNoFur(npc, owner);
		}
	}
	
	private final void hasFur(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
			public void action() {
				final String[] options28 = {"Can you sell me some furs?", "Hello, I am in search of a quest", "Would you like to buy my fur?"};
				owner.setBusy(false);
				owner.sendMenu(options28);
				owner.setMenuHandler(new MenuHandler(options28) {
					public void handleReply(final int option, final String reply) {
						owner.setBusy(true);
						for(Player informee : owner.getViewArea().getPlayersInView()) {
							informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
						}
						switch(option) {
							case 0:
								furs(npc, owner);
								break;
							case 1:
								quest(npc, owner);
								break;
							case 2:
								buyMyFur(npc, owner);
								break;
						}
					}
				});
			}
		});
	}
	
	private final void buyMyFur(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Lets have a look at it"}) {
			public void finished() {
				owner.sendMessage("Baraek examines a fur");
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"It's not in the best of condition", "I guess I could give 12 coins to take it off your hands"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
							public void action() {
								final String[] options31 = {"Yeah that'll do", "I think I'll keep hold of it actually"};
								owner.setBusy(false);
								owner.sendMenu(options31);
								owner.setMenuHandler(new MenuHandler(options31) {
									public void handleReply(final int option, final String reply) {
										owner.setBusy(true);
										for(Player informee : owner.getViewArea().getPlayersInView()) {
											informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
										}
										switch(option) {
											case 0:
												thatWillDo(npc, owner);
												break;
											case 1:
												World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Oh ok", "Didn't want it anyway"}) {
													public void finished() {
														owner.setBusy(false);
														npc.unblock();
													}
												});
												break;
										}
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private final void thatWillDo(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new SingleEvent(owner, 2000) {
			public void action() {
				owner.sendMessage("You give Baraek a fur");
				owner.getInventory().remove(new InvItem(146, 1));
				World.getDelayedEventHandler().add(new SingleEvent(owner, 2000) {
					public void action() {
						owner.sendMessage("And he gives you twelve coins");
						owner.getInventory().add(new InvItem(10, 12));
						owner.setBusy(false);
						npc.unblock();
					}
				});
			}
		});
	}
	
	private final void hasNoFur(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
			public void action() {
				final String[] options14 = {"Can you sell me some furs?", "Hello, I am in search of a quest"};
				owner.setBusy(false);
				owner.sendMenu(options14);
				owner.setMenuHandler(new MenuHandler(options14) {
					public void handleReply(final int option, final String reply) {
						owner.setBusy(true);
						for(Player informee : owner.getViewArea().getPlayersInView()) {
							informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
						}
						switch(option) {
							case 0:
								furs(npc, owner);
								break;
							case 1:
								quest(npc, owner);
								break;
						}
					}
				});
			}
		});
	}

	private final void furs(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yeah sure they're 20 gold coins a piece"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options15 = {"Yeah, okay here you go", "20 gold coins thats an outrage"};
						owner.setBusy(false);
						owner.sendMenu(options15);
						owner.setMenuHandler(new MenuHandler(options15) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
									if (owner.getInventory().countId(10) >= 20)
										hereYouGo(npc, owner);
									else
										notEnoughGold(npc, owner);
									break;
									case 1:
										outrage(npc, owner);
									break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private final void notEnoughGold(final Npc npc, final Player owner)
	{
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Sorry, it seems you don't have enough gold on you."}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});	
	}
	
	private final void quest(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Sorry kiddo, I'm a fur trader not a damsel in distress"}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private final void hereYouGo(final Npc npc, final Player owner) {
		owner.sendMessage("You buy a fur from Baraek");
		owner.getInventory().add(new InvItem(146, 1));
		owner.getInventory().remove(10, 20);
		owner.sendInventory();
		owner.setBusy(false);
		npc.unblock();
	}
	
	private final void outrage(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Well, okay I'll go down to 18"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options16 = {"Okay here you go", "No thanks I'll leave it"};
						owner.setBusy(false);
						owner.sendMenu(options16);
						owner.setMenuHandler(new MenuHandler(options16) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										if (owner.getInventory().countId(10) >= 18)
										eighteenCoins(npc, owner);
										else
										notEnoughGold(npc, owner);
										break;
									case 1:
										leaveIt(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private final void eighteenCoins(final Npc npc, final Player owner) {
		owner.sendMessage("You buy a fur from Baraek");
		owner.getInventory().add(new InvItem(146, 1));
		owner.getInventory().remove(10, 18);
		owner.sendInventory();
		owner.setBusy(false);
		npc.unblock();
	}
	
	private final void leaveIt(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"It's your loss mate"}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
}