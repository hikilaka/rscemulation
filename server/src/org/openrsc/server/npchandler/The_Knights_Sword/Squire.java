/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/

//Starting quest

package org.openrsc.server.npchandler.The_Knights_Sword;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.logging.Logger;
import org.openrsc.server.logging.model.eventLog;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.InvItem;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.model.World;
import org.openrsc.server.npchandler.NpcHandler;
import org.openrsc.server.util.DataConversions;
public class Squire implements NpcHandler {
	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(14);
		if(q != null) {
			if(q.finished()) {
				questFinished(npc, owner);
			} else {
				switch(q.getStage()) {
					case 0:
					case 1:
						stillLooking(npc, owner);
						break;
					case 2:
						needPicture(npc, owner);
						break;
					case 3:
						if(owner.getInventory().contains(265)) {
							giveSword(npc, owner);
						} else {
							foundDwarf(npc, owner);
						}						
				}
			}
		} else {
			questNotStarted(npc, owner);
		}
	}

	private void questFinished(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hello friend", "Thanks for your help before", "Vyvin never even realised it was a different sword"}, true) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void needPicture(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"So how are you doing getting a sword"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I've found an imcando dwarf", "But he needs a picture of the sword before he can make it"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"A picture eh?", "The only one I can think of is in a small portrait of Sir Vyvin's father", "Sir Vyvin keeps it in a cupboard in his room I think"}) {
							public void finished() {
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}

	private void foundDwarf(final Npc npc, final Player owner) {
		npc.blockedBy(owner);
		owner.setBusy(true);
		final String[] messages0 = {"So how are you doing getting a sword?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages0, true) {
			public void finished() {
				final String[] messages1 = {"I've found a dwarf who will make the sword", "I've just got to find the materials for it now"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages1) {
					public void finished() {
						owner.setBusy(false);
						npc.unblock();
					}
				});
			}
		});
	}

	private void giveSword(final Npc npc, final Player owner) {
		npc.blockedBy(owner);
		owner.setBusy(true);
		final String[] messages0 = {"I have retrieved your sword for you"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages0, true) {
			public void finished() {
				final String[] messages1 = {"Thank you, Thank you", "I was seriously worried I'd have to own up to Sir Vyvin"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages1) {
					public void finished() {
						owner.sendMessage("You give the sword to the squire");
						owner.getInventory().remove(new InvItem(265, 1));
						owner.sendInventory();
						owner.finishQuest(14);
						owner.sendMessage("Well done you have completed the knight's sword quest");
						owner.incQuestExp(13, 4850);
						owner.sendStat(13);
						owner.sendMessage("@gre@You have gained 1 quest point!");
						owner.setBusy(false);
						npc.unblock();
						Logger.log(new eventLog(owner.getUsernameHash(), owner.getAccount(), owner.getIP(), DataConversions.getTimeStamp(), "<strong>" + owner.getUsername() + "</strong>" + " has completed the <span class=\"recent_quest\">Knight's Sword</span> quest!"));
					}
				});
			}
		});
	}

	private void questNotStarted(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hello I am the squire to Sir Vyvin"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options76 = {"And how is life as a squire?", "Wouldn't you prefer to be a squire for me?"};
						owner.setBusy(false);
						owner.sendMenu(options76);
						owner.setMenuHandler(new MenuHandler(options76) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										life(npc, owner);
										break;
									case 1:
										forMe(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void forMe(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"No, sorry I'm loyal to Vyvin"}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void life(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Well Sir Vyvin is a good guy to work for", "However I'm in a spot of trouble today", "I've gone and lost Sir Vyvin's sword"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options77 = {"Do you know where you lost it?", "I can make a new sword if you like", "Is he angry?"};
						owner.setBusy(false);
						owner.sendMenu(options77);
						owner.setMenuHandler(new MenuHandler(options77) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										lostIt(npc, owner);
										break;
									case 1:
										makeSword(npc, owner);
										break;
									case 2:
										angry(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void makeSword(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Thanks for the offer", "I'd be surprised if you could though", "The thing is, this sword is a family heirloom", "It has been passed down through Vyvin's family for five generations.", "It was originally made by the imcando dwarves", "Who were a particularly skilled tribe of dwarven smiths", "I doubt anyone could make it in the style they do"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options78 = {"So would these dwarves make another one?", "Well I hope you find it soon"};
						owner.setBusy(false);
						owner.sendMenu(options78);
						owner.setMenuHandler(new MenuHandler(options78) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										anotherOne(npc, owner);
										break;
									case 1:
										findItSoon(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void anotherOne(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I'm not a hundred percent sure the Imcando tribe exists anymore", "I should think Reldo, the palace librarian in Varrock will know", "He has done a lot of research on the races of runescape", "I don't suppose you could try and track down the Imcando dwaves for me?", "I've got so much work to do"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options79 = {"Ok I'll give it a go", "No I've got lots of mining work to do"};
						owner.setBusy(false);
						owner.sendMenu(options79);
						owner.setMenuHandler(new MenuHandler(options79) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										Ok(npc, owner);
										break;
									case 1:
										owner.setBusy(false);
										npc.unblock();
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void Ok(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Thank you very much", "As I say, the best place to start should be with reldo"}) {
			public void finished() {
				owner.addQuest(14, 1);
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void angry(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"He doesn't know yet", "I was hoping I could think of something to do", "Before he does find out", "But I find myself at a loss"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options80 = {"Well do you know the vague area you lost it?", "I can make a new sword if you like", "Well the kingdom is fairly abundant with swords", "Well I hope you find it soon"};
						owner.setBusy(false);
						owner.sendMenu(options80);
						owner.setMenuHandler(new MenuHandler(options80) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										vagueArea(npc, owner);
										break;
									case 1:
										makeSword(npc, owner);
										break;
									case 2:
										abudnant(npc, owner);
										break;
									case 3:
										findItSoon(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void findItSoon(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yes me too", "I'm not looking forward to telling Vyvin I've lost it", "He's going to want it for the parade next week as well"}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void stillLooking(final Npc npc, final Player owner) {
		npc.blockedBy(owner);
		owner.setBusy(true);
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"So how are you doing getting a sword?"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I'm still looking for Imcando dwarves"}) {
					public void finished() {
						owner.setBusy(false);
						npc.unblock();
					}
				});
			}
		});
	}

	private void vagueArea(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"No I was carrying it for him all the way from where", "he had it stored in Lumbridge", "It must have slipped from my pack during the trip", "And you know what people are like these days", "Someone will have just picked it up and kept it for themselves"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options81 = {"I can make a new sword if you like", "Well the kingdom is fairly abundant with swords", "Well I hope you find it soon"};
						owner.setBusy(false);
						owner.sendMenu(options81);
						owner.setMenuHandler(new MenuHandler(options81) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										makeSword(npc, owner);
										break;
									case 1:
										abudnant(npc, owner);
										break;
									case 2:
										findItSoon(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void abudnant(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yes you can get bronze swords anywhere", "But this isn't any old sword", "The thing is, this sword is a family heirloom", "It has been passed down through Vyvin's family for five generations", "It was originally made by the imcando Dwaves", "Who were a particularly skilled tribe in dwarven smiths", "I doubt anyone could make it in the style they do"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options82 = {"So would these dwarves make another one?", "Well I hope you find it soon"};
						owner.setBusy(false);
						owner.sendMenu(options82);
						owner.setMenuHandler(new MenuHandler(options82) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										anotherOne(npc, owner);
										break;
									case 1:
										findItSoon(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void lostIt(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Well now if I knew that", "It wouldn't be lost, now would it?"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options83 = {"Well do you know the vague area you lost it?", "I can make a new sword if you like", "Well the kingdom is faily abundant with swords", "Is he angry?"};
						owner.setBusy(false);
						owner.sendMenu(options83);
						owner.setMenuHandler(new MenuHandler(options83) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										vagueArea(npc, owner);
										break;
									case 1:
										makeSword(npc, owner);
										break;
									case 2:
										abudnant(npc, owner);
										break;
									case 3:
										angry(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
}