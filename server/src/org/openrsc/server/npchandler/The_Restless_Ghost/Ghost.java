/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/
package org.openrsc.server.npchandler.The_Restless_Ghost;

import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.World;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.npchandler.NpcHandler;
public class Ghost implements NpcHandler {
	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		final Quest q = owner.getQuest(5);
		if(q != null) {
			if(q.finished()) { //Quest Finished
				 owner.sendMessage("The ghost does not appear interested in talking");
				 owner.setBusy(false);
			} else { //Quest Underway
				switch(q.getStage()) { //Quest Stage Player is on
					case 0: //No Amulet
						noAmulet(npc, owner);
						break;
					case 1: // Have not talked to ghost
						if(owner.getInventory().wielding(24)) {
							hasAmulet(npc, owner);
						} else {
							noAmulet(npc, owner);
						}
						break;
					case 2: //Got ghost's quest.
					case 3: //Got skull
						if(owner.getInventory().wielding(24)) {
							if(owner.getInventory().contains(412)) {
								finishQuest(npc, owner);
							}	else {
								findingMySkull(npc, owner);
							}
						} else {
							noAmulet(npc, owner);
						}
						break;
					default:
						owner.setBusy(false);
						System.out.println("The Restless Ghost Error : " + owner.getUsername());
				}
			}
		} else { //Quest Not Started
			noAmulet(npc, owner);
		}
	}
	
	private void finishQuest(final Npc npc, final Player owner) {
		final String[] messages4 = {"Hello ghost, how are you?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages4, true) {
			public void finished() {
				final String[] messages5 = {"How are you doing finding my skull?"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages5) {
					public void finished() {
						final String[] messages6 = {"I have found it"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages6) {
							public void finished() {
								final String[] messages7 = {"Hurrah now I can stop being a ghost", "You just need to put it in my coffin over there", "And I will be free"};
								World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages7) {
									public void finished() {
										owner.setBusy(false);
										npc.unblock();
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	public void findingMySkull(final Npc npc, final Player owner) {
		final String[] messages0 = {"Hello ghost, how are you?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages0, true) {
			public void finished() {
				final String[] messages1 = {"How are you doing finding my skull?"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages1) {
					public void finished() {
						final String[] messages2 = {"Sorry, I can't find it at the moment"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages2) {
							public void finished() {
								final String[] messages3 = {"Ah well keep on looking", "I'm pretty sure it's somewhere in the tower southwest from here", "There's a lot of levels to the tower though", "I suppose it might take a little while to find"};
								World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages3) {
									public void finished() {
										owner.setBusy(false);
										npc.unblock();
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	public void hasAmulet(final Npc npc, final Player owner) {
		final String[] messages0 = {"Hello ghost, how are you?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages0, true) {
			public void finished() {
				final String[] messages1 = {"Not very good actually"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages1) {
					public void finished() {
						final String[] messages2 = {"What's the problem then?"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages2) {
							public void finished() {
								final String[] messages3 = {"Did you just understand what I said?"};
								World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages3) {
									public void finished() {
										World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
											public void action() {
												final String[] options0 = {"Yep, now tell me what the problem is", "No, you still sound like you're speaking nonsense to me", "Wow, this amulet works"};
												owner.setBusy(false);
												owner.sendMenu(options0);
												owner.setMenuHandler(new MenuHandler(options0) {
													public void handleReply(final int option, final String reply) {
														owner.setBusy(true);
														for(Player informee : owner.getViewArea().getPlayersInView()) {
															informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
														}
														switch(option) {
															case 0:
																final String[] messages4 = {"Wow this is incredible, I didn't expect anyone to understand me again"};
																World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages4) {
																	public void finished() {
																		final String[] messages5 = {"Yes, yes I can understand you", "But have you any idea why you're doomed to be a ghost?"};
																		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages5) {
																			public void finished() {
																				whyGhost(npc, owner);
																			}
																		});
																	}
																});
																break;
															case 1:
																nonsense(npc, owner);
																break;
															case 2:
																amuletWorks(npc, owner);
																break;
														}
													}
												});
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	public void noAmulet(final Npc npc, final Player owner) {
		final String[] messages0 = {"Hello ghost, how are you?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages0, true) {
			public void finished() {
				final String[] messages1 = {"Wooo wooo wooooo"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages1) {
					public void finished() {
						World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
							public void action() {
								final String[] options0 = {"Sorry I don't speak ghost", "Ooh that's interesting", "Any hints where I can find some treasure?"};
								owner.setBusy(false);
								owner.sendMenu(options0);
								owner.setMenuHandler(new MenuHandler(options0) {
									public void handleReply(final int option, final String reply) {
										owner.setBusy(true);
										for(Player informee : owner.getViewArea().getPlayersInView()) {
											informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
										}
										switch(option) {
											case 0:
												dontSpeakGhost(npc, owner);
												break;
											case 1:
												interesting(npc, owner);
												break;
											case 2:
												anyHints(npc, owner);
												break;
										}
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void dontSpeakGhost(final Npc npc, final Player owner) {
		final String[] messages2 = {"Woo woo?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages2) {
			public void finished() {
				final String[] messages3 = {"Nope still don't understand you"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages3) {
					public void finished() {
						final String[] messages4 = {"Woooooooo"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages4) {
							public void finished() {
								final String[] messages5 = {"Never mind"};
								World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages5) {
									public void finished() {
										owner.setBusy(false);
										npc.unblock();
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void interesting(final Npc npc, final Player owner) {
		final String[] messages6 = {"Woo wooo", "Wooooooooooooooooo"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages6) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options1 = {"Did he really?", "Yeah that's what I thought"};
						owner.setBusy(false);
						owner.sendMenu(options1);
						owner.setMenuHandler(new MenuHandler(options1) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										didHe(npc, owner);
										break;
									case 1:
										iThought(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void didHe(final Npc npc, final Player owner) {
		final String[] messages7 = {"Woo"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages7) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options2 = {"My brother had exactly the same problem", "Goodbye. Thanks for the chat"};
						owner.setBusy(false);
						owner.sendMenu(options2);
						owner.setMenuHandler(new MenuHandler(options2) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										myBrother(npc, owner);
										break;
									case 1:
										goodBye(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void myBrother(final Npc npc, final Player owner) {
		final String[] messages8 = {"Woo Wooooo", "Wooooo Woo woo woo"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages8) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options3 = {"Goodbye. Thanks for the chat", "You'll have to give me the recipe some time"};
						owner.setBusy(false);
						owner.sendMenu(options3);
						owner.setMenuHandler(new MenuHandler(options3) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										goodBye(npc, owner);
										break;
									case 1:
										recipe(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void amuletWorks(final Npc npc, final Player owner) {
		final String[] messages6 = {"Oh its your amulet that's doing it. I did wonder", "I don't suppose you can help me? I don't like being a ghost"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages6) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options1 = {"Yes Ok. Do you know why you're a ghost?", "No, you're scary"};
						owner.setBusy(false);
						owner.sendMenu(options1);
						owner.setMenuHandler(new MenuHandler(options1) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										whyGhost(npc, owner);
										break;
									case 1:
										owner.setBusy(false);
										npc.unblock();
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void nonsense(final Npc npc, final Player owner) {
		final String[] messages7 = {"Oh that's a pity. You got my hopes up there"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages7) {
			public void finished() {
				final String[] messages8 = {"Yeah, it is a pity. Sorry"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages8) {
					public void finished() {
						final String[] messages9 = {"Hang on a second. You can understand me"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages9) {
							public void finished() {
								World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
									public void action() {
										final String[] options2 = {"No I can't", "Yep clever aren't I"};
										owner.setBusy(false);
										owner.sendMenu(options2);
										owner.setMenuHandler(new MenuHandler(options2) {
											public void handleReply(final int option, final String reply) {
												owner.setBusy(true);
												for(Player informee : owner.getViewArea().getPlayersInView()) {
													informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
												}
												switch(option) {
													case 0:
														final String[] messages10 = {"I don't know, the first person I can speak to in ages is a moron"};
														World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages10) {
															public void finished() {
																owner.setBusy(false);
																npc.unblock();
															}
														});
														break;
													case 1:
														final String[] messages11 = {"I'm impressed", "You must be very powerful", "I don't suppose you can stop me being a ghost"};
														World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages11) {
															public void finished() {
																World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
																	public void action() {
																		final String[] options3 = {"Yes, Ok, Do you know why you're a ghost?", "No, you're scary"};
																		owner.setBusy(false);
																		owner.sendMenu(options3);
																		owner.setMenuHandler(new MenuHandler(options3) {
																			public void handleReply(final int option, final String reply) {
																				owner.setBusy(true);
																				for(Player informee : owner.getViewArea().getPlayersInView()) {
																					informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
																				}
																				switch(option) {
																					case 0:
																						whyGhost(npc, owner);
																						break;
																					case 1:
																						owner.setBusy(false);
																						npc.unblock();
																						break;
																				}
																			}
																		});
																	}
																});
															}
														});
														break;
												}
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void whyGhost(final Npc npc, final Player owner) {
		final String[] messages12 = {"I'm not sure"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages12) {
			public void finished() {
				final String[] messages13 = {"I've been told a certain task may need to be completed", "So you can rest in peace"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages13) {
					public void finished() {
						final String[] messages14 = {"I should think it is probably because", "A warlock has come along and stolen my skull", "If you look inside my coffin there", "you'll find my corpse without a head on it"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages14) {
							public void finished() {
								final String[] messages15 = {"Do you know where this warlock might be now?"};
								World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages15) {
									public void finished() {
										final String[] messages16 = {"I think it was one of the warlocks who lives in the big tower", "In the sea southwest from here"};
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages16) {
											public void finished() {
												final String[] messages17 = {"Ok I will try and get the skull back for you, so you can rest in peace."};
												World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages17) {
													public void finished() {
														final String[] messages18 = {"Ooh thank you. That would be such a great relief", "It is so dull being a ghost"};
														World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages18) {
															public void finished() {
																owner.incQuestCompletionStage(5);
																owner.setBusy(false);
																npc.unblock();
															}
														});
													}
												});
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void recipe(final Npc npc, final Player owner) {
		final String[] messages9 = {"Wooooooo woo wooooooooo"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages9) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options4 = {"Goodbye. Thanks for the chat", "Hmm I'm not sure about that"};
						owner.setBusy(false);
						owner.sendMenu(options4);
						owner.setMenuHandler(new MenuHandler(options4) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										goodBye(npc, owner);
										break;
									case 1:
										notSure(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void notSure(final Npc npc, final Player owner) {
		final String[] messages10 = {"Wooo woo"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages10) {
			public void finished() {
				final String[] messages11 = {"Well if you insist"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages11) {
					public void finished() {
						final String[] messages12 = {"Wooooooooo"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages12) {
							public void finished() {
								final String[] messages13 = {"Ah well, better be off now"};
								World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages13) {
									public void finished() {
										final String[] messages14 = {"Woo"};
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages14) {
											public void finished() {
												final String[] messages15 = {"Bye"};
												World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages15) {
													public void finished() {
														owner.setBusy(false);
														npc.unblock();
													}
												});
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void goodBye(final Npc npc, final Player owner) {
		final String[] messages16 = {"Wooo wooo"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages16) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void iThought(final Npc npc, final Player owner) {
		final String[] messages17 = {"Wooo wooooooooooooooooooo"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages17) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options5 = {"Goodbye. Thanks for the chat", "Hmm I'm not sure about that"};
						owner.setBusy(false);
						owner.sendMenu(options5);
						owner.setMenuHandler(new MenuHandler(options5) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										goodBye(npc, owner);
										break;
									case 1:
										notSure(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void anyHints(final Npc npc, final Player owner) {
		final String[] messages18 = {"Wooooooooo woo!"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages18) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options6 = {"Sorry I don't speak ghost", "Thank you. You've been very helpful"};
						owner.setBusy(false);
						owner.sendMenu(options6);
						owner.setMenuHandler(new MenuHandler(options6) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										dontSpeakGhost(npc, owner);
										break;
									case 1:
										final String[] messages19 = {"Woooooooooo"};
										World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages19) {
											public void finished() {
												owner.setBusy(false);
												npc.unblock();
											}
										});
										break;
								}
							}
						});
					}
				});
			}
		});
	}
}