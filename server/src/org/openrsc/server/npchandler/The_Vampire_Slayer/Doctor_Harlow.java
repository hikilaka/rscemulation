/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/
package org.openrsc.server.npchandler.The_Vampire_Slayer;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.InvItem;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.model.World;
import org.openrsc.server.npchandler.NpcHandler;
public class Doctor_Harlow implements NpcHandler {
	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(15);
		if(q != null && owner.getInventory().countId(217) == 0) {
			if(q.finished()) {
				questNotStarted(npc, owner);
			} else {
				questStarted(npc, owner);
			}
		} else {
			questNotStarted(npc, owner);
		}
	}
	
	private final void questNotStarted(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Buy me a drrink pleassh"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options4 = {"No you've had enough", "Ok mate"};
						owner.setBusy(false);
						owner.sendMenu(options4);
						owner.setMenuHandler(new MenuHandler(options4) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										owner.setBusy(false);
										npc.unblock();
										break;
									case 1:
										okMate(npc, owner, false);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private final void questStarted(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Buy me a drrink pleassh"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options4 = {"No you've had enough", "Ok mate", "Morgan needs your help"};
						owner.setBusy(false);
						owner.sendMenu(options4);
						owner.setMenuHandler(new MenuHandler(options4) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										owner.setBusy(false);
										npc.unblock();
										break;
									case 1:
										okMate(npc, owner, false);
										break;
									case 2:
										morganHelp(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	
	private void morganHelp(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Morgan you shhay?"}) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"His village is being terrorised by a vampire", "He wanted me to ask you how I should go about stopping it"}) {
					public void finished() {
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Buy me a beer and i'll teash you what you need to know"}) {
							public void finished() {
								World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
									public void action() {
										final String[] options5 = {"Ok mate", "But this is your friend Morgan we're talking about"};
										owner.setBusy(false);
										owner.sendMenu(options5);
										owner.setMenuHandler(new MenuHandler(options5) {
											public void handleReply(final int option, final String reply) {
												owner.setBusy(true);
												for(Player informee : owner.getViewArea().getPlayersInView()) {
													informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
												}
												switch(option) {
													case 0:
														okMate(npc, owner, true);
														break;
													case 1:
														friendMorgan(npc, owner);
														break;
												}
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	
	private void okMate(final Npc npc, final Player owner, final boolean stake) {
		if(owner.getInventory().countId(193) > 0) {
			World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
				public void action() {
				owner.sendMessage("You give Dr.Harlow a beer");
				owner.getInventory().remove(new InvItem(193, 1));
				owner.sendInventory();
				if(stake) {
					World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"So tell me how to kill vampires then"}) {
						public void finished() {
							World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yesh yesh vampires I was very good at killing em once", "Well you're gonna to kill it with a stake", "Otherwishe he'll just regenerate", "Yes your killing blow must be done with a stake", "I jusht happen to have one on me"}) {
								public void finished() {
									World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
										public void action() {
											owner.sendMessage("Dr. Harlow hands you a stake");
											owner.getInventory().add(new InvItem(217, 1));
											owner.sendInventory();
											World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You'll need a hammer to hand to drive it in properly as well", "One last thing", "It's wise to carry garlic with you", "Vampires are weakened somewhat if they can smell garlic", "Dunno where you'd find that though", "Remember even then a vampire is a dangeroush foe"}) {
												public void finished() {
													World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"Thank you very much"}) {
														public void finished() {
															owner.setBusy(false);
															npc.unblock();
														}
													});
												}
											});
										}
									});

								}
							});
						}
					});
				} else {
					World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Cheersh mate"}) {
						public void finished() {
							owner.setBusy(false);
							npc.unblock();
						}
					});
				}
				}
			});
		} else {
			World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I'll just go and buy one"}) {
				public void finished() {
					owner.setBusy(false);
					npc.unblock();
				}
			});
		}
	}
	
	private void friendMorgan(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Buy ush a drink anyway"}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
}