/**
* Generated By NPCScript :: A scripting engine created for openrsc by Zilent
*/
package org.openrsc.server.npchandler.Tutorial_Island;
import org.openrsc.server.model.World;
import org.openrsc.server.event.DelayedQuestChat;
import org.openrsc.server.event.SingleEvent;
import org.openrsc.server.model.ChatMessage;
import org.openrsc.server.model.InvItem;
import org.openrsc.server.model.MenuHandler;
import org.openrsc.server.model.Npc;
import org.openrsc.server.model.Player;
import org.openrsc.server.model.Quest;
import org.openrsc.server.npchandler.NpcHandler;

public class Magic_Instructor implements NpcHandler {
	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(100);
		if(q != null) {
			if(q.finished())
			{
				finished(npc, owner);
			}
			else
			switch(q.getStage()) {
				case 18:
					mageChatA(npc, owner);
					break;
				case 19:
					if(!hasRunes(owner)) {
						mageChatC(npc, owner);
					} else {
						mageChatB(npc, owner);
					}
					break;
				case 20:
					mageChatD(npc, owner, true);
					break;
				default:
					finished(npc, owner);
			}
		}
		else 
		{
			shouldntBeHere(npc, owner);
		}
	}
	
	private void mageChatA(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"There's a good magic potential in this one", "yes definitely something I can work with"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options1 = {"Hmm are you talking about me?", "Teach me some magic"};
						owner.setBusy(false);
						owner.sendMenu(options1);
						owner.setMenuHandler(new MenuHandler(options1) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										talkingMe(npc, owner);
										break;
									case 1:
										teachMe(npc, owner);
										break;
								}
							}
						});
					}
				});
			}
		});
	}

	private void teachMe(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Teacher, yes I am one of them", "Ok move your mouse over the book icon on the menu bar", "this is your magic menu", "You will see at level 1 magic you can only cast wind strike", "move your mouse over the wind strike text", "if you look at the bottom of the magic window", "You will see more information about the spell", "Runes required for the spell have two numbers over them", "The first number is how many runes you have", "The second is how many runes the spell requires", "Speak to me again when you have checked this"}) {
			public void finished() {
				owner.incQuestCompletionStage(100);
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

	private void talkingMe(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yes that is the one of which I speak", "Ok move your mouse over the book icon on the menu bar", "this is your magic menu", "You will see at level 1 magic you can only cast wind strike", "move your mouse over the wind strike text", "if you look at the bottom of the magic window", "You will see more information about the spell", "Runes required for the spell have two numbers over them", "The first number is how many runes you have", "The second is how many runes the spell requires", "Speak to me again when you have checked this"}) {
			public void finished() {
				owner.incQuestCompletionStage(100);
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private boolean hasRunes(Player owner) {
		return owner.getInventory().countId(32) != 0 || owner.getInventory().countId(36) != 0 || owner.getInventory().countId(34) != 0 || owner.getInventory().countId(33) != 0 || owner.getInventory().countId(35) != 0;
	}
	
	private void mageChatC(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, new String[] {"I don't have the runes to cast wind strike"}, true) {
			public void finished() {
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"How do you expect to do magic without runes?", "Ok I shall have to provide you with runes"}) {
					public void finished() {
						owner.sendMessage("The instructor gives you some runes");
						owner.getInventory().add(new InvItem(33, 12));
						owner.getInventory().add(new InvItem(35, 8));
						owner.getInventory().add(new InvItem(32, 3));
						owner.getInventory().add(new InvItem(34, 2));
						owner.getInventory().add(new InvItem(36, 1));
						owner.sendInventory();
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ok look at your spell list now", "You will see you have the runes for the spell", "And it shows up yellow in your list"}) {
							public void finished() {
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}

	private void mageChatB(final Npc npc, final Player owner) {
		Npc chicken = World.getNpc(3, 217, 220, 754, 756);
		if(chicken != null) {
			World.getDelayedEventHandler().add(new DelayedQuestChat(chicken, owner, new String[] {"cluck"}, true) {
				public void finished() {
					World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Aha a chicken", "An ideal wind strike target", "Ok click on the wind strike spell in your spell list", "then click on the chicken to choose it as a target"}, true) {
						public void finished() {
							owner.setBusy(false);
							npc.unblock();
						}
					});
				}
			});
		} else {
			owner.sendMessage("Not enough chickens - please wait");
		}
	}
	
	private void mageChatD(final Npc npc, final Player owner, final boolean incStage) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Well done", "As you get a higher magic level", "You will be able to cast all sorts of interesting spells", "Now go through the next door"}, true) {
			public void finished() {
				owner.incQuestCompletionStage(100);
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void finished(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I suggest you go through the door now"}, true) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void shouldntBeHere(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You shouldn't be here yet"}, true) {
			public void finished() {
				owner.teleport(217, 744, false);
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
}